[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/components/ArrowBack.jsx",
    "content": "import { TouchableOpacity } from 'react-native';\r\nimport React from 'react'\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useLoading } from '../Context';\r\n\r\nexport default function ArrowBack({ navigation, navigate, style }) {\r\n    const { setShouldRefresh } = useLoading();\r\n\r\n    let btnStyle = {\r\n        marginHorizontal: 10,\r\n        position: 'absolute',\r\n        zIndex: 99,\r\n        ...style\r\n    }\r\n\r\n    handleNav = () => {\r\n        if(navigate == 'Profile'){\r\n            setShouldRefresh(true);\r\n        }\r\n        navigation.navigate(navigate);\r\n    }\r\n\r\n    return (\r\n        <TouchableOpacity style={btnStyle} onPress={handleNav}>\r\n            <Ionicons name=\"arrow-back-circle-outline\" size={30} color=\"darkblue\" />\r\n        </TouchableOpacity>\r\n    )\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/ArrowBack.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "ArrowBack",
    "memberof": "src/components/ArrowBack.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArrowBack.jsx~ArrowBack",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/ArrowBack.jsx",
    "importStyle": "ArrowBack",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *, \"navigate\": *, \"style\": *}"
        ],
        "defaultRaw": {
          "navigation": null,
          "navigate": null,
          "style": null
        },
        "defaultValue": "{\"navigation\":null,\"navigate\":null,\"style\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/components/ChangeData.jsx",
    "content": "import { TouchableOpacity } from 'react-native';\r\nimport { View, Text, TextInput, StyleSheet } from 'react-native';\r\nimport Modal from 'react-native-modal';\r\nimport { useState, useEffect } from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport DBStorage from './../database/firebaseDBMethods';\r\nimport { useLoading } from './../Context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\n\r\nexport default function ChangeData({ label, value, refresh }) {\r\n\r\n  const { showLoading, hideLoading, setShouldRefresh } = useLoading();\r\n\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const [name, setname] = useState('');\r\n  const [email, setemail] = useState('');\r\n  const [perfilInv, setperfilInv] = useState('');\r\n  const [profissao, setprofissao] = useState('');\r\n\r\n  const [userData, setUserData] = useState({});\r\n\r\n  const toggleModal = () => {\r\n    setModalVisible(!isModalVisible);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getAllData = async () => {\r\n      const doc = await AsyncStorage.getItem('userDoc');\r\n      const fr = new DBStorage(doc);\r\n      try {\r\n        showLoading();\r\n        let res = await fr.getFullDoc();\r\n        let uD = res.userData;\r\n        setUserData(uD);\r\n      } catch (err) { console.log(err) } finally { hideLoading(); }\r\n    };\r\n\r\n    getAllData().catch(console.error);\r\n  }, []);\r\n\r\n  updateData = async () => {\r\n    const doc = await AsyncStorage.getItem('userDoc');\r\n    const fr = new DBStorage(doc);\r\n\r\n    if (label === 'Nome') {\r\n      let out = await updateName(fr);\r\n      console.log(out);\r\n    }\r\n    if (label === 'Email') {\r\n      let out = await updateEmail(fr);\r\n      console.log(out);\r\n    }\r\n    if (label === 'Profissão') {\r\n      let out = await updateProfissao(fr);\r\n      console.log(out);\r\n    }\r\n    if (label === 'Perfil de Investimento') {\r\n      let out = await updatePerfil(fr);\r\n      console.log(out);\r\n    }\r\n\r\n    toggleModal();\r\n    setShouldRefresh(true);\r\n    await refresh();\r\n  };\r\n\r\n\r\n\r\n  updateName = async (fr) => {\r\n    let perf = \"\";\r\n    if (userData.perfilInvestimento && userData.perfilInvestimento != '') {\r\n      perf = userData.perfilInvestimento;\r\n    }\r\n    let prof = \"\";\r\n    if (userData.profissao && userData.profissao != '') {\r\n      prof = userData.profissao;\r\n    }\r\n    let outp = await fr.updateDoc({\r\n      userData: {\r\n        name: name,\r\n        email: userData.email,\r\n        perfilInvestimento: perf,\r\n        profissao: prof\r\n      },\r\n    });\r\n    return outp;\r\n  }\r\n\r\n  updateEmail = async (fr) => {\r\n    let perf = \"\";\r\n    if (userData.perfilInvestimento && userData.perfilInvestimento != '') {\r\n      perf = userData.perfilInvestimento;\r\n    }\r\n    let prof = \"\";\r\n    if (userData.profissao && userData.profissao != '') {\r\n      prof = userData.profissao;\r\n    }\r\n    let outp = await fr.updateDoc({\r\n      userData: {\r\n        name: userData.name,\r\n        email: email,\r\n        perfilInvestimento: perf,\r\n        profissao: prof\r\n      },\r\n    });\r\n    return outp;\r\n  }\r\n\r\n  updateProfissao = async (fr) => {\r\n    let perf = \"\";\r\n    if (userData.perfilInvestimento && userData.perfilInvestimento != '') {\r\n      perf = userData.perfilInvestimento;\r\n    }\r\n    let outp = await fr.updateDoc({\r\n      userData: {\r\n        name: userData.name,\r\n        email: userData.email,\r\n        perfilInvestimento: perf,\r\n        profissao: profissao,\r\n      },\r\n    });\r\n    return outp;\r\n  }\r\n\r\n  updatePerfil = async (fr) => {\r\n    let prof = \"\";\r\n    if (userData.profissao && userData.profissao != '') {\r\n      prof = userData.profissao;\r\n    }\r\n    let outp = await fr.updateDoc({\r\n      userData: {\r\n        name: userData.name,\r\n        email: userData.email,\r\n        perfilInvestimento: perfilInv,\r\n        profissao: prof\r\n      },\r\n    });\r\n    return outp;\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <View>\r\n      <View style={styles.component}>\r\n        <Modal style={styles.modal_modal} isVisible={isModalVisible}>\r\n          <View style={styles.modal_modalView}>\r\n            <View style={styles.modal_container}>\r\n              <View style={styles.modal_titleView}>\r\n                <Text style={styles.modal_title}>Alterando</Text>\r\n              </View>\r\n\r\n              <View style={{ padding: 12 }}>\r\n                <View style={styles.modal_inputGroup}>\r\n                  <Text style={styles.modal_label}>{label}</Text>\r\n                  <TextInput\r\n                    style={styles.modal_input}\r\n                    placeholder={value}\r\n                    onChangeText={(text) => {\r\n                      if (label === 'Nome') {\r\n                        setname(text);\r\n                      }\r\n                      if (label === 'Email') {\r\n                        setemail(text)\r\n                      }\r\n                      if (label === 'Profissão') {\r\n                        setprofissao(text)\r\n                      }\r\n                      if (label === 'Perfil de Investimento') {\r\n                        setperfilInv(text)\r\n                      }\r\n                    }}\r\n                  />\r\n                </View>\r\n              </View>\r\n\r\n              <View style={styles.modal_buttonContainer}>\r\n                <TouchableOpacity\r\n                  style={styles.modal_btn}\r\n                  onPress={toggleModal}>\r\n                  <Ionicons\r\n                    name=\"arrow-back-circle-sharp\"\r\n                    size={55}\r\n                    color={\"darkblue\"}\r\n                  />\r\n                </TouchableOpacity>\r\n\r\n                <TouchableOpacity style={styles.modal_btn} onPress={updateData}>\r\n                  <Ionicons\r\n                    name=\"add-circle-sharp\"\r\n                    size={55}\r\n                    color={\"darkblue\"}\r\n                  />\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        <View style={{ flexDirection: 'column' }}>\r\n          <Text style={styles.label}>{label}</Text>\r\n          <Text style={styles.value}>{value}</Text>\r\n        </View>\r\n        <TouchableOpacity onPress={toggleModal} style={styles.btn}>\r\n          <Text>Alterar</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <View style={styles.border} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  border: {\r\n    borderBottomColor: \"darkblue\",\r\n    borderBottomWidth: 1,\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    marginBottom: 5,\r\n    marginTop: 5,\r\n  },\r\n  component: {\r\n    marginTop: 10,\r\n    padding: 18,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  label: {\r\n    fontSize: 12,\r\n    paddingLeft: 20,\r\n    color: '#c5c5c5',\r\n  },\r\n  value: {\r\n    fontSize: 18,\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n  },\r\n  btn: {\r\n    alignSelf: 'center',\r\n    paddingTop: 8,\r\n    paddingBottom: 8,\r\n    paddingLeft: 12,\r\n    paddingRight: 12,\r\n    borderRadius: 10,\r\n    fontSize: 18,\r\n    backgroundColor: '#e7e7e7',\r\n  },\r\n\r\n  modal_modalView: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 15,\r\n    margin: 10,\r\n  },\r\n  modal_container: {\r\n    borderTopLeftRadius: 20,\r\n  },\r\n  modal_titleView: {\r\n    backgroundColor: \"darkblue\",\r\n    marginBottom: 5,\r\n  },\r\n  modal_title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    padding: 20,\r\n    textAlign: 'center',\r\n    color: '#fff',\r\n  },\r\n  modal_inputGroup: {\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n  },\r\n  modal_label: {\r\n    textAlign: 'left',\r\n    fontSize: 20,\r\n    marginBottom: 8,\r\n  },\r\n  modal_input: {\r\n    borderWidth: 0.8,\r\n    borderColor: \"darkblue\",\r\n    borderRadius: 5,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 5,\r\n    marginBottom: 16,\r\n    fontSize: 20,\r\n  },\r\n  modal_buttonContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: 15,\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/ChangeData.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "ChangeData",
    "memberof": "src/components/ChangeData.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ChangeData.jsx~ChangeData",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/ChangeData.jsx",
    "importStyle": "ChangeData",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"label\": *, \"value\": *, \"refresh\": *}"
        ],
        "defaultRaw": {
          "label": null,
          "value": null,
          "refresh": null
        },
        "defaultValue": "{\"label\":null,\"value\":null,\"refresh\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/ChangeData.jsx",
    "static": true,
    "longname": "src/components/ChangeData.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/ChangeData.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/components/homeComponents/Balance.jsx",
    "content": "import React, { useRef, useState } from 'react';\r\nimport { StyleSheet, Text, TouchableOpacity, View, Animated } from 'react-native';\r\nimport TooltipComp from '../TooltipComp';\r\n\r\n\r\nexport default function Balance({ showBalanceTip, setBalanceTip, setShowMenuTip, income, negative }) {\r\n\r\n    const fadeAnim = useRef(new Animated.Value(1)).current;\r\n\r\n    const fadeIn = () => {\r\n        Animated.timing(fadeAnim, {\r\n            toValue: 1,\r\n            duration: 400,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n    const fadeOut = () => {\r\n        Animated.timing(fadeAnim, {\r\n            toValue: 0,\r\n            duration: 500,\r\n            useNativeDriver: true,\r\n        }).start();\r\n    };\r\n\r\n\r\n    const toggleBalance = () => {\r\n        let state = fadeAnim.addListener((st) => { return st })\r\n        if (state % 2 == 0) {\r\n            fadeOut();\r\n        } else {\r\n            fadeIn();\r\n        }\r\n    };\r\n\r\n    const [isShowSecondTip, setIsShowSecondTip] = useState(false);\r\n    const [zindex, setzindex] = useState(99);\r\n\r\n    return (\r\n        <TooltipComp tipText=\"Aqui estão os balanços que você registrar no app!\" placement={\"top\"}\r\n            showTip={showBalanceTip} tStyle={{ marginTop: -35, width: 300 }}\r\n            setTip={() => { setzindex(0); setBalanceTip(false); setIsShowSecondTip(true); }}>\r\n\r\n            <TouchableOpacity style={[st.balance_viewContainer, { zIndex: zindex }]} onPress={toggleBalance} >\r\n                <View style={{ width: 300 }}></View>\r\n                <TooltipComp tipText=\"Você pode esconder ou exibir os valores, apenas clicando aqui!\"\r\n                    showTip={isShowSecondTip} setTip={() => { setIsShowSecondTip(false); setzindex(99); setShowMenuTip(true); }} placement={\"bottom\"}>\r\n\r\n                    <View style={st.balance_container} >\r\n                        <Animated.View style={[st.balance_data, { opacity: fadeAnim }]}>\r\n                            <View style={st.balance_item}>\r\n                                <Text style={st.balance_itemTitle}>Saldo</Text>\r\n                                <View style={st.balance_content}>\r\n                                    <Text style={st.balance_currency}>R$</Text>\r\n                                    <Text style={st.balance_balance}>{income}</Text>\r\n                                </View>\r\n                            </View>\r\n                            <View style={st.balance_item}>\r\n                                <Text style={st.balance_itemTitle}>Gastos</Text>\r\n                                <View style={st.balance_content}>\r\n                                    <Text style={st.balance_currency}>R$</Text>\r\n                                    <Text style={st.balance_expenses}>{negative}</Text>\r\n                                </View>\r\n                            </View>\r\n                        </Animated.View>\r\n                    </View>\r\n\r\n                </TooltipComp>\r\n            </TouchableOpacity >\r\n        </TooltipComp>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    balance_viewContainer: {\r\n        marginTop: -50,\r\n        marginHorizontal: 12,\r\n    },\r\n    balance_container: {\r\n        height: 130,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: '#fff',\r\n        borderColor: 'rgba(0,0,0,0.2)',\r\n        borderWidth: 0.3,\r\n        borderRadius: 4,\r\n        marginVertical: 14\r\n    },\r\n    balance_data: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        flex: 1,\r\n    },\r\n    balance_item: {\r\n        borderRadius: 4,\r\n        paddingTop: 22,\r\n        paddingBottom: 22,\r\n        zIndex: 99,\r\n    },\r\n    balance_itemTitle: {\r\n        fontSize: 20,\r\n        color: '#DADADA',\r\n    },\r\n    balance_content: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    balance_currency: {\r\n        color: '#DADADA',\r\n        marginRight: 6,\r\n    },\r\n    balance_balance: {\r\n        fontSize: 22,\r\n        color: '#2ecc71',\r\n    },\r\n    balance_expenses: {\r\n        fontSize: 22,\r\n        color: '#e74c3c',\r\n    },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/Balance.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "Balance",
    "memberof": "src/components/homeComponents/Balance.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/Balance.jsx~Balance",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/Balance.jsx",
    "importStyle": "Balance",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"showBalanceTip\": *, \"setBalanceTip\": *, \"setShowMenuTip\": *, \"income\": *, \"negative\": *}"
        ],
        "defaultRaw": {
          "showBalanceTip": null,
          "setBalanceTip": null,
          "setShowMenuTip": null,
          "income": null,
          "negative": null
        },
        "defaultValue": "{\"showBalanceTip\":null,\"setBalanceTip\":null,\"setShowMenuTip\":null,\"income\":null,\"negative\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/Balance.jsx",
    "static": true,
    "longname": "src/components/homeComponents/Balance.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/Balance.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/components/homeComponents/Header.jsx",
    "content": "import React, { useEffect, useRef, useState } from 'react';\r\nimport { StyleSheet, Text, TouchableOpacity, View, Image } from 'react-native';\r\nimport * as Animatable from 'react-native-animatable';\r\nimport { Feather } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport Storage from '../../database/firebaseStorageMethods';\r\n\r\n\r\nexport default function Header({ isRef, isRefresh, refresh, userData, navigation }) {\r\n\r\n    const [profilePic, setProfilePic] = useState(null);\r\n    const [IsRef, setIsRef] = useState(false);\r\n    const [showProfilePic, setShowProfilePic] = useState(false);\r\n    const slideDownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const getProfilePic = async () => {\r\n            await updateProfilePic();\r\n        };\r\n        getProfilePic();\r\n        slideDownRef.current.slideInDown(1000);\r\n    }, [isRef]);\r\n\r\n\r\n    const updateProfilePic = async () => {\r\n        if (isRef) {\r\n            setIsRef(true);\r\n            const pic = await AsyncStorage.getItem('profilePic');\r\n            if (pic) {\r\n                setProfilePic(pic);\r\n                setShowProfilePic(true);\r\n            } else {\r\n                try {\r\n                    const userdoc = await AsyncStorage.getItem('userDoc');\r\n                    const fr = new Storage(\"profile\");\r\n                    const picUrl = await fr.downloadFileUrl(userdoc+'.png');\r\n                    setProfilePic(picUrl);\r\n                    setShowProfilePic(true);\r\n                    await AsyncStorage.setItem('profilePic', picUrl);\r\n                } catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n            isRefresh(!isRef);\r\n            setIsRef(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={st.header_container}>\r\n            <View style={st.header_content}>\r\n                <Animatable.View ref={slideDownRef} style={st.header_profile}>\r\n                    <Text style={st.header_userName}>{userData.name}</Text>\r\n                    <TouchableOpacity\r\n                        activeOpacity={0.9}\r\n                        style={st.header_btnUser}\r\n                        onPress={() => navigation.navigate('Profile')}>\r\n\r\n                        {showProfilePic ?\r\n                            <Image source={{ uri: profilePic }} style={st.header_profilePic} /> :\r\n                            <Feather name=\"user\" size={27} color={'darkblue'} />}\r\n                    </TouchableOpacity>\r\n                </Animatable.View>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    header_profile: {\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'row',\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n        paddingRight: 20,\r\n        paddingLeft: 20,\r\n        alignItems: 'center',\r\n    },\r\n    header_container: {\r\n        paddingTop: 20,\r\n        backgroundColor: 'darkblue',\r\n        paddingBottom: 60,\r\n    },\r\n    header_userName: {\r\n        color: '#fff',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n    },\r\n    header_btnUser: {\r\n        backgroundColor: '#fff',\r\n        padding: 1,\r\n        borderRadius: 100,\r\n        borderWidth: 0.5,\r\n        zIndex: 99\r\n    },\r\n    header_profilePic: {\r\n        width: 60,\r\n        height: 60,\r\n        borderRadius: 100,\r\n        borderWidth: 1,\r\n    }\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/Header.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "Header",
    "memberof": "src/components/homeComponents/Header.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/Header.jsx~Header",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/Header.jsx",
    "importStyle": "Header",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isRef\": *, \"isRefresh\": *, \"refresh\": *, \"userData\": *, \"navigation\": *}"
        ],
        "defaultRaw": {
          "isRef": null,
          "isRefresh": null,
          "refresh": null,
          "userData": null,
          "navigation": null
        },
        "defaultValue": "{\"isRef\":null,\"isRefresh\":null,\"refresh\":null,\"userData\":null,\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/Header.jsx",
    "static": true,
    "longname": "src/components/homeComponents/Header.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/Header.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/components/homeComponents/HomeModal.jsx",
    "content": "import React, { useState } from 'react';\r\nimport { SafeAreaView, View, Text, TouchableOpacity, StyleSheet, TextInput, } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Modal from 'react-native-modal';\r\n\r\nexport default function HomeModal({ isModalVisible, dados, handleModal, saveData, setMoney, setDescription, setDate, date }) {\r\n    formatarData = (dateInput) => {\r\n        let data = new Date(dateInput)\r\n        const dia = String(data.getDate()).padStart(2, '0');\r\n        const mes = String(data.getMonth() + 1).padStart(2, '0'); // Mes é base 0, então adicione 1\r\n        const ano = data.getFullYear();\r\n\r\n        return `${dia}/${mes}/${ano}`;\r\n    };\r\n\r\n    const [mode, setMode] = useState('date');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const onChange = (event, selectedDate) => {\r\n        const currentDate = selectedDate;\r\n        setShow(false);\r\n        setDate(currentDate);\r\n    };\r\n\r\n    const showMode = (currentMode) => {\r\n        setShow(true);\r\n        setMode(currentMode);\r\n    };\r\n\r\n\r\n    return (\r\n        <Modal style={st.modal} isVisible={isModalVisible}>\r\n            <View style={st.modalView}>\r\n                <View style={st.container}>\r\n                    <View style={st.titleView}>\r\n                        <Text style={st.title}>\r\n                            {dados.actionType} {dados.label}\r\n                        </Text>\r\n                    </View>\r\n\r\n                    <View style={{ padding: 12 }}>\r\n                        <View style={st.inputGroup}>\r\n                            <Text style={st.label}>{dados.label}</Text>\r\n                            <TextInput\r\n                                style={st.input}\r\n                                onChangeText={(text) => setDescription(text)}\r\n                            />\r\n                        </View>\r\n                        <View style={st.inputGroup}>\r\n                            <Text style={st.label}>Valor (R$)</Text>\r\n                            <TextInput\r\n                                style={st.input}\r\n                                keyboardType=\"numeric\"\r\n                                onChangeText={(text) => {\r\n                                    const formattedText = text.replace(/[^0-9.]/g, '');\r\n                                    setMoney(formattedText);\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        <SafeAreaView>\r\n                            <Text style={st.label}>Date</Text>\r\n                            <TouchableOpacity onPress={() => { showMode('date'); }}>\r\n                                <Text style={st.input}>{formatarData(date)}</Text>\r\n                            </TouchableOpacity>\r\n\r\n                            {show && (\r\n                                <DateTimePicker\r\n                                    testID=\"dateTimePicker\"\r\n                                    value={date}\r\n                                    mode={mode}\r\n                                    is24Hour={true}\r\n                                    onChange={onChange}\r\n                                />\r\n                            )}\r\n                        </SafeAreaView>\r\n                    </View>\r\n\r\n                    <View style={st.buttonContainer}>\r\n                        <TouchableOpacity style={st.btn} onPress={handleModal}>\r\n                            <Ionicons\r\n                                name=\"arrow-back-circle-sharp\"\r\n                                size={55}\r\n                                color=\"darkblue\"\r\n                            />\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={st.btn} onPress={saveData}>\r\n                            <Ionicons name=\"add-circle-sharp\" size={55} color=\"darkblue\" />\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    modalView: {\r\n        backgroundColor: 'white',\r\n        borderRadius: 15,\r\n        margin: 10,\r\n    },\r\n    container: {\r\n        borderTopLeftRadius: 20,\r\n    },\r\n    titleView: {\r\n        backgroundColor: 'darkblue',\r\n        marginBottom: 5,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        padding: 20,\r\n        textAlign: 'center',\r\n        color: '#fff',\r\n    },\r\n    inputGroup: {\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n    },\r\n    label: {\r\n        textAlign: 'left',\r\n        fontSize: 20,\r\n        marginBottom: 8,\r\n    },\r\n    input: {\r\n        borderWidth: 0.8,\r\n        borderColor: 'darkblue',\r\n        borderRadius: 5,\r\n        paddingHorizontal: 8,\r\n        paddingVertical: 5,\r\n        marginBottom: 16,\r\n        fontSize: 20,\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        padding: 15,\r\n    },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/HomeModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "HomeModal",
    "memberof": "src/components/homeComponents/HomeModal.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/HomeModal.jsx~HomeModal",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/HomeModal.jsx",
    "importStyle": "HomeModal",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isModalVisible\": *, \"dados\": *, \"handleModal\": *, \"saveData\": *, \"setMoney\": *, \"setDescription\": *, \"setDate\": *, \"date\": *}"
        ],
        "defaultRaw": {
          "isModalVisible": null,
          "dados": null,
          "handleModal": null,
          "saveData": null,
          "setMoney": null,
          "setDescription": null,
          "setDate": null,
          "date": null
        },
        "defaultValue": "{\"isModalVisible\":null,\"dados\":null,\"handleModal\":null,\"saveData\":null,\"setMoney\":null,\"setDescription\":null,\"setDate\":null,\"date\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/HomeModal.jsx",
    "static": true,
    "longname": "src/components/homeComponents/HomeModal.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/HomeModal.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/components/homeComponents/HorizontalMenuOption.jsx",
    "content": "import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, Image } from 'react-native';\r\nimport { AntDesign, Fontisto } from '@expo/vector-icons';\r\nimport DBStorage from '../../database/firebaseDBMethods';\r\nimport { useLoading } from '../../Context';\r\nimport HomeModal from './HomeModal';\r\nimport TooltipComp from '../TooltipComp';\r\n\r\n\r\nexport default function HorizontalMenuOption({ isRef, isRefresh, refresh, navigation, dados, allData, showSettingsTip, setShowSettingsTip }) {\r\n\r\n  const { showLoading, hideLoading, setShouldRefresh } = useLoading();\r\n  const [myDados, setDados] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setDados(dados);\r\n  }, [dados]);\r\n\r\n  const [description, setDescription] = useState('');\r\n  const [money, setMoney] = useState(0);\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const handleModal = () => {\r\n    if (dados.type === 2) {\r\n      navigation.navigate('Settings');\r\n    } else if (dados.type === 99) {\r\n      navigation.navigate('MoreOptions', { dados: allData });\r\n    } else {\r\n      setModalVisible(!isModalVisible);\r\n    }\r\n  };\r\n\r\n  const saveData = async () => {\r\n    try {\r\n      setModalVisible(false);\r\n      const doc = await AsyncStorage.getItem('userDoc');\r\n      const fr = new DBStorage(doc);\r\n      showLoading();\r\n      if (myDados.type === 0) {\r\n        res = await fr.appendToIncomes({\r\n          description: description,\r\n          value: money,\r\n          date: formatarData(date),\r\n          category: dados.label,\r\n        });\r\n      } else if (myDados.type === 1) {\r\n        res = await fr.appendToExpenses({\r\n          description: description,\r\n          value: money,\r\n          date: formatarData(date),\r\n          category: dados.label,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(err);\r\n    } finally {\r\n      setShouldRefresh(true);\r\n      refresh();\r\n      isRefresh(!isRef);\r\n      hideLoading();\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <View>\r\n\r\n      <HomeModal setDescription={setDescription} setMoney={setMoney} setDate={setDate} date={date}\r\n        isModalVisible={isModalVisible} dados={dados} handleModal={handleModal} saveData={saveData} />\r\n\r\n      {myDados.type == 2 ?\r\n        <TooltipComp tipText=\"Para começar, insira/atualize seus dados!\" showTip={showSettingsTip} setTip={setShowSettingsTip} placement=\"left\">\r\n\r\n          <TouchableOpacity style={st._actionBtn} onPress={handleModal}>\r\n            <View style={st._areaBtn}>\r\n              {dados.type === 4 ?\r\n                <Fontisto name={dados.icon} size={26} color=\"#000\" /> :\r\n                <AntDesign name={dados.icon} size={26} color=\"#000\" />\r\n              }\r\n            </View>\r\n            <Text style={st._labelBtn}>{dados.label}</Text>\r\n          </TouchableOpacity>\r\n        </TooltipComp>\r\n\r\n        :\r\n\r\n        <TouchableOpacity style={st._actionBtn} onPress={handleModal}>\r\n          <View style={st._areaBtn}>\r\n            {dados.type === 4 ?\r\n              <Fontisto name={dados.icon} size={26} color=\"#000\" /> :\r\n              <AntDesign name={dados.icon} size={26} color=\"#000\" />}\r\n          </View>\r\n          <Text style={st._labelBtn}>{dados.label}</Text>\r\n        </TouchableOpacity>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nconst st = StyleSheet.create({\r\n  _actionBtn: {\r\n    alignItems: 'center',\r\n    marginRight: 32,\r\n  },\r\n  _areaBtn: {\r\n    backgroundColor: '#ecf0f1',\r\n    borderRadius: 30,\r\n    height: 60,\r\n    width: 60,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  _labelBtn: {\r\n    marginTop: 4,\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/HorizontalMenuOption.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "HorizontalMenuOption",
    "memberof": "src/components/homeComponents/HorizontalMenuOption.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/HorizontalMenuOption.jsx~HorizontalMenuOption",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/HorizontalMenuOption.jsx",
    "importStyle": "HorizontalMenuOption",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isRef\": *, \"isRefresh\": *, \"refresh\": *, \"navigation\": *, \"dados\": *, \"allData\": *, \"showSettingsTip\": *, \"setShowSettingsTip\": *}"
        ],
        "defaultRaw": {
          "isRef": null,
          "isRefresh": null,
          "refresh": null,
          "navigation": null,
          "dados": null,
          "allData": null,
          "showSettingsTip": null,
          "setShowSettingsTip": null
        },
        "defaultValue": "{\"isRef\":null,\"isRefresh\":null,\"refresh\":null,\"navigation\":null,\"dados\":null,\"allData\":null,\"showSettingsTip\":null,\"setShowSettingsTip\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/HorizontalMenuOption.jsx",
    "static": true,
    "longname": "src/components/homeComponents/HorizontalMenuOption.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/HorizontalMenuOption.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/components/homeComponents/Menu.jsx",
    "content": "import React from 'react';\r\nimport { StyleSheet, View, ScrollView } from 'react-native';\r\nimport TooltipComp from '../TooltipComp';\r\nimport HorizontalMenuOption from './HorizontalMenuOption';\r\n\r\n\r\nconst menuOptions = [\r\n    {\r\n        actionType: 'Adicionando',\r\n        label: 'Entrada',\r\n        icon: 'plussquareo',\r\n        type: 0, //entrada\r\n    },\r\n    {\r\n        actionType: 'Adicionando',\r\n        label: 'Compra',\r\n        icon: 'tagso',\r\n        type: 1, //saida\r\n    },\r\n    {\r\n        actionType: 'Adicionando',\r\n        label: 'Gasto',\r\n        icon: 'barcode',\r\n        type: 1, //saida\r\n    },\r\n    {\r\n        actionType: null,\r\n        label: 'Conta',\r\n        icon: 'setting',\r\n        type: 2 //settings\r\n    },\r\n    {\r\n        actionType: null,\r\n        label: 'Mais',\r\n        icon: 'gift',\r\n        type: 99 //more options\r\n    },\r\n];\r\n\r\n\r\nexport default function Menu({ isRefresh, isRef, refresh, navigation, moneyGraph, showMenuTip, setTip, showSettingsTip, setShowSettingsTip }) {\r\n\r\n\r\n    return (\r\n        <TooltipComp tipText=\"Arraste o menu para o lado, para ver todas as suas opções!\" placement=\"bottom\"\r\n        tStyle={{marginTop: -30}} showTip={showMenuTip} setTip={setTip}>\r\n            <ScrollView\r\n                style={[st.scrollContainer, { paddingRight: 10 }]}\r\n                horizontal={true}\r\n                showsHorizontalScrollIndicator={false}>\r\n                {menuOptions.map((item, index) => (\r\n                    <View style={{ height: 100, marginRight: 15 }} key={index}>\r\n                        <HorizontalMenuOption\r\n                            refresh={refresh}\r\n                            isRefresh={isRefresh}\r\n                            isRef={isRef}\r\n                            navigation={navigation}\r\n                            dados={item}\r\n                            key={index}\r\n                            allData={moneyGraph}\r\n                            showSettingsTip={showSettingsTip}\r\n                            setShowSettingsTip={setShowSettingsTip}\r\n                        />\r\n                    </View>\r\n                ))}\r\n            </ScrollView>\r\n\r\n        </TooltipComp>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    scrollContainer: {\r\n        marginBottom: 20,\r\n        marginTop: 18,\r\n        paddingEnd: 14,\r\n        paddingStart: 14,\r\n    }\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/Menu.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "menuOptions",
    "memberof": "src/components/homeComponents/Menu.jsx",
    "static": true,
    "longname": "src/components/homeComponents/Menu.jsx~menuOptions",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/Menu.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "Menu",
    "memberof": "src/components/homeComponents/Menu.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/Menu.jsx~Menu",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/Menu.jsx",
    "importStyle": "Menu",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isRefresh\": *, \"isRef\": *, \"refresh\": *, \"navigation\": *, \"moneyGraph\": *, \"showMenuTip\": *, \"setTip\": *, \"showSettingsTip\": *, \"setShowSettingsTip\": *}"
        ],
        "defaultRaw": {
          "isRefresh": null,
          "isRef": null,
          "refresh": null,
          "navigation": null,
          "moneyGraph": null,
          "showMenuTip": null,
          "setTip": null,
          "showSettingsTip": null,
          "setShowSettingsTip": null
        },
        "defaultValue": "{\"isRefresh\":null,\"isRef\":null,\"refresh\":null,\"navigation\":null,\"moneyGraph\":null,\"showMenuTip\":null,\"setTip\":null,\"showSettingsTip\":null,\"setShowSettingsTip\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/Menu.jsx",
    "static": true,
    "longname": "src/components/homeComponents/Menu.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/Menu.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/components/homeComponents/MoreOptions.jsx",
    "content": "import React, { useEffect, useState } from 'react';\r\nimport { Text, View, StyleSheet, TouchableOpacity, ScrollView, StatusBar } from 'react-native';\r\nimport { AntDesign, Fontisto } from '@expo/vector-icons';\r\n\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight : 64\r\n\r\nexport default function MoreOptions({ navigation, route }) {\r\n    const [moneyFlow, setMoneyFlow] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setMoneyFlow(route.params.dados);\r\n    }, []);\r\n\r\n    const menus = [\r\n        {\r\n            actionType: null,\r\n            label: 'Gráficos',\r\n            page: 'Graphs',\r\n            icon: 'areachart',\r\n            data: moneyFlow,\r\n            type: 1 //graphs\r\n        },\r\n        {\r\n            actionType: null,\r\n            label: 'Cotações',\r\n            page: 'Money',\r\n            icon: 'money-symbol',\r\n            type: 2 //money\r\n        },\r\n        {\r\n            actionType: null,\r\n            label: 'Eventos',\r\n            page: 'MapLoadingScreen',\r\n            icon: 'calendar',\r\n            type: 3 //events\r\n        },\r\n    ]\r\n    return (\r\n        <View style={{ marginTop: statusBarHeight, flex: 1, flexDirection: 'colunm' }}>\r\n            <View style={{}}>\r\n                <View style={st.txtView}>\r\n                    <Text style={st.title}>\r\n                        Mais opções para você!\r\n                    </Text>\r\n                </View>\r\n                <ScrollView>\r\n                    <View style={{ flex: 1, alignSelf: 'center', alignItems: 'center' }}>\r\n                        <View style={st.menusView}>\r\n                            {menus.map((item, index) => (\r\n                                <TouchableOpacity style={st._actionBtn} key={index}\r\n                                    onPress={() => { navigation.navigate(item.page, { allData: item.data }) }}>\r\n                                    <View style={st._areaBtn} key={`${index}V`} >\r\n                                        {item.type === 2 ?\r\n                                            <Fontisto key={`${index}i`} name={item.icon} size={26} color=\"darkblue\" /> :\r\n                                            <AntDesign key={`${index}i`} name={item.icon} size={26} color=\"darkblue\" />\r\n                                        }\r\n                                    </View>\r\n                                    <Text key={`${index}T`} style={st._labelBtn}>{item.label}</Text>\r\n                                </TouchableOpacity>\r\n                            ))}\r\n                        </View></View>\r\n                </ScrollView>\r\n            </View>\r\n            <View style={st.back}>\r\n                <TouchableOpacity style={st.backBtn} onPress={() => { navigation.navigate(\"Home\") }}>\r\n                    <AntDesign name=\"back\" size={24} color=\"darkblue\" />\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    _actionBtn: {\r\n        alignItems: 'center',\r\n        marginHorizontal: 32,\r\n        marginVertical: 16\r\n    },\r\n    _areaBtn: {\r\n        backgroundColor: '#d5e1e4',\r\n        borderRadius: 30,\r\n        height: 60,\r\n        width: 60,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    _labelBtn: {\r\n        marginTop: 4,\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        color: '#000'\r\n    },\r\n    title: {\r\n        marginHorizontal: 10,\r\n        marginVertical: 8,\r\n        fontSize: 22,\r\n        color: '#dadada'\r\n    },\r\n    txtView: {\r\n        backgroundColor: 'darkblue',\r\n        paddingVertical: 20\r\n    },\r\n    menusView: {\r\n        marginTop: 15,\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        alignSelf: 'flex-start',\r\n        width: '100%',\r\n    },\r\n    back: {\r\n        position: 'absolute',\r\n        bottom: 30,\r\n        right: 30\r\n    },\r\n    backBtn: {\r\n        borderWidth: 3,\r\n        borderColor: 'darkblue',\r\n        borderRadius: 100,\r\n        padding: 5\r\n    }\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/MoreOptions.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/components/homeComponents/MoreOptions.jsx",
    "static": true,
    "longname": "src/components/homeComponents/MoreOptions.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/MoreOptions.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "MoreOptions",
    "memberof": "src/components/homeComponents/MoreOptions.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/MoreOptions.jsx~MoreOptions",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/MoreOptions.jsx",
    "importStyle": "MoreOptions",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *, \"route\": *}"
        ],
        "defaultRaw": {
          "navigation": null,
          "route": null
        },
        "defaultValue": "{\"navigation\":null,\"route\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/MoreOptions.jsx",
    "static": true,
    "longname": "src/components/homeComponents/MoreOptions.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/MoreOptions.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/components/homeComponents/MovementRegister.jsx",
    "content": "import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { React, useState } from 'react';\r\n\r\n\r\nexport default function MovementRegister({ props }) {\r\n  const [showValue, setShowValue] = useState(false);\r\n\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={st.container}\r\n      onPress={() => setShowValue(!showValue)}>\r\n      <Text style={st.data}>{props.date}</Text>\r\n      <View style={st.content}>\r\n        <Text style={st.label}>{props.description}</Text>\r\n\r\n        {showValue ? (\r\n          <View exitBeforeEnter>\r\n            <Text\r\n              style={props.type === 1 ? st.value : st.expenses}\r\n              from={{ translateX: 100 }}\r\n              animate={{ translateX: 0 }}\r\n              transition={{ type: 'timing', duration: 500 }}>\r\n              {props.type === 1 ? `R$ ${parseFloat(props.value).toFixed(2)}` :\r\n                `R$ -${parseFloat(props.value).toFixed(2)}`}\r\n            </Text>\r\n          </View>\r\n        ) : (\r\n          <View style={st.skeleton} />\r\n        )}\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nconst st = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    marginBottom: 24,\r\n    borderBottomWidth: 0.5,\r\n    padding: 5,\r\n    borderBottomColor: '#dadada',\r\n  },\r\n  content: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: 2,\r\n    marginBottom: 8,\r\n  },\r\n  data: {\r\n    color: '#dadada',\r\n    fontWeight: 'bold',\r\n  },\r\n  label: {\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  value: {\r\n    fontSize: 15,\r\n    color: '#2ecc71',\r\n    fontWeight: 'bold',\r\n  },\r\n  expenses: {\r\n    fontSize: 15,\r\n    color: '#e74c3c',\r\n    fontWeight: 'bold',\r\n  },\r\n  skeleton: {\r\n    marginTop: 6,\r\n    width: 80,\r\n    height: 10,\r\n    backgroundColor: '#dadada',\r\n    borderRadius: 8,\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/MovementRegister.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "MovementRegister",
    "memberof": "src/components/homeComponents/MovementRegister.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/MovementRegister.jsx~MovementRegister",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/MovementRegister.jsx",
    "importStyle": "MovementRegister",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"props\": *}"
        ],
        "defaultRaw": {
          "props": null
        },
        "defaultValue": "{\"props\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/MovementRegister.jsx",
    "static": true,
    "longname": "src/components/homeComponents/MovementRegister.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/MovementRegister.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/components/homeComponents/Movements.jsx",
    "content": "import React from 'react';\r\nimport { StyleSheet, Text, View, ScrollView, } from 'react-native';\r\nimport TooltipComp from '../TooltipComp';\r\nimport MovementRegister from './MovementRegister';\r\n\r\nexport default function Movements({ money, showMovementsTip, setShowMovementsTip, msg }) {\r\n    return (\r\n        <View style={st.container}>\r\n\r\n            <TooltipComp tipText=\"Aqui ficará toda a movimentação financeira que você registrar!\"\r\n                showTip={showMovementsTip} setTip={setShowMovementsTip} placement=\"top\">\r\n                <Text style={st.title}>Últimas movimentações</Text>\r\n                <Text>{msg}</Text>\r\n            </TooltipComp>\r\n\r\n            <ScrollView showsVerticalScrollIndicator={false}>\r\n                {money.map((item, index) => (\r\n                    <View key={index}>\r\n                        <MovementRegister props={item} key={index} />\r\n                    </View>\r\n                ))}\r\n            </ScrollView>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    container: {\r\n        padding: 10,\r\n        marginLeft: 3,\r\n        marginRight: 3\r\n    },\r\n    title: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginRight: 14,\r\n        marginBottom: 20,\r\n    },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/homeComponents/Movements.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "Movements",
    "memberof": "src/components/homeComponents/Movements.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/homeComponents/Movements.jsx~Movements",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/homeComponents/Movements.jsx",
    "importStyle": "Movements",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"money\": *, \"showMovementsTip\": *, \"setShowMovementsTip\": *, \"msg\": *}"
        ],
        "defaultRaw": {
          "money": null,
          "showMovementsTip": null,
          "setShowMovementsTip": null,
          "msg": null
        },
        "defaultValue": "{\"money\":null,\"showMovementsTip\":null,\"setShowMovementsTip\":null,\"msg\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "st",
    "memberof": "src/components/homeComponents/Movements.jsx",
    "static": true,
    "longname": "src/components/homeComponents/Movements.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/homeComponents/Movements.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/components/LogoImage.jsx",
    "content": "import React, { useEffect, useState } from 'react';\r\nimport { View, Animated, Easing } from 'react-native';\r\n\r\nexport default function LogoImage() {\r\n    const [fadeAnim] = useState(new Animated.Value(0));\r\n    const [rotation] = useState(new Animated.Value(0));\r\n\r\n    useEffect(() => {\r\n        const startAnimation = async () => {\r\n            Animated.timing(fadeAnim, {\r\n                toValue: 1,\r\n                duration: 5000,\r\n                easing: Easing.linear,\r\n                useNativeDriver: true,\r\n            }).start();\r\n\r\n            await new Promise(resolve => setTimeout(resolve, 3500));\r\n\r\n            Animated.timing(rotation, {\r\n                toValue: 1,\r\n                duration: 2000,\r\n                easing: Easing.linear,\r\n                useNativeDriver: true,\r\n            }).start();\r\n\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n        };\r\n\r\n        startAnimation();\r\n    }, []);\r\n\r\n    const animatedStyle = {\r\n        opacity: fadeAnim,\r\n        transform: [\r\n            {\r\n                rotate: rotation.interpolate({\r\n                    inputRange: [0, 1],\r\n                    outputRange: ['0deg', '360deg'],\r\n                }),\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <View style={{ justifyContent: 'center', alignItems: 'center' }}>\r\n            <Animated.Image\r\n                source={require('./../static/imgs/logo.png')}\r\n                style={[{ width: 200, height: 200 }, animatedStyle]}\r\n            />\r\n        </View>\r\n    );\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/LogoImage.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "LogoImage",
    "memberof": "src/components/LogoImage.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/LogoImage.jsx~LogoImage",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/LogoImage.jsx",
    "importStyle": "LogoImage",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/components/MoneysGraph.jsx",
    "content": "import { BarChart } from \"react-native-chart-kit\";\r\nimport { Dimensions, View, StyleSheet, Text } from \"react-native\";\r\n\r\nconst screenWidth = Dimensions.get(\"window\").width;\r\n\r\nexport default function MoneysGraph({ bardata, name, color }) {\r\n\r\n    const chartConfig = {\r\n        backgroundGradientFrom: \"#fff\",\r\n        backgroundGradientFromOpacity: 0,\r\n        backgroundGradientTo: \"#fff\",\r\n        backgroundGradientToOpacity: 0,\r\n        strokeWidth: 1,\r\n        barPercentage: 0.5,\r\n        color: () => { return color }\r\n    };\r\n\r\n\r\n    return (\r\n        <View style={styles.graphGroup}>\r\n            <Text style={styles.txt}>{name.replace(\"/\", \" x \")}</Text>\r\n            <BarChart\r\n                width={screenWidth - 20}\r\n                height={220}\r\n                data={bardata}\r\n                yAxisLabel=\"\"\r\n                chartConfig={chartConfig}\r\n                fromZero={true}\r\n                showValuesOnTopOfBars={true}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    txt: {\r\n        textAlign: 'center',\r\n        fontSize: 20,\r\n        fontWeight: '500'\r\n    },\r\n    graphGroup: {\r\n        borderWidth: 1,\r\n        borderColor: 'rgba(0, 0, 139,.2)',\r\n        margin: 10,\r\n        padding: 5\r\n    }\r\n})",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/MoneysGraph.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/components/MoneysGraph.jsx",
    "static": true,
    "longname": "src/components/MoneysGraph.jsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/MoneysGraph.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "MoneysGraph",
    "memberof": "src/components/MoneysGraph.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/MoneysGraph.jsx~MoneysGraph",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/MoneysGraph.jsx",
    "importStyle": "MoneysGraph",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"bardata\": *, \"name\": *, \"color\": *}"
        ],
        "defaultRaw": {
          "bardata": null,
          "name": null,
          "color": null
        },
        "defaultValue": "{\"bardata\":null,\"name\":null,\"color\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/MoneysGraph.jsx",
    "static": true,
    "longname": "src/components/MoneysGraph.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/components/MoneysGraph.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/components/TooltipComp.jsx",
    "content": "import Tooltip from 'react-native-walkthrough-tooltip';\r\nimport React from 'react';\r\nimport {View, Text} from 'react-native';\r\n\r\nexport default function TooltipComp({ children, tipText, showTip, setTip, placement, tStyle }) {\r\n\r\n    return (\r\n        <Tooltip\r\n            isVisible={showTip}\r\n            content={\r\n                <View style={{ padding: 2 }}>\r\n                    <Text>{tipText}</Text>\r\n                </View>\r\n            }\r\n            onClose={setTip}\r\n            placement={placement} \r\n            tooltipStyle={tStyle}\r\n            contentStyle={{flexWrap: 'wrap', wordWrap: 'wrap'}}\r\n            >\r\n            {children}\r\n        </Tooltip>\r\n    )\r\n}",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/components/TooltipComp.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "TooltipComp",
    "memberof": "src/components/TooltipComp.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/TooltipComp.jsx~TooltipComp",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/components/TooltipComp.jsx",
    "importStyle": "TooltipComp",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"children\": *, \"tipText\": *, \"showTip\": *, \"setTip\": *, \"placement\": *, \"tStyle\": *}"
        ],
        "defaultRaw": {
          "children": null,
          "tipText": null,
          "showTip": null,
          "setTip": null,
          "placement": null,
          "tStyle": null
        },
        "defaultValue": "{\"children\":null,\"tipText\":null,\"showTip\":null,\"setTip\":null,\"placement\":null,\"tStyle\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/Context.jsx",
    "content": "\r\nimport React, { useState, createContext, useContext } from 'react';\r\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\r\n\r\n/**\r\n * Context for managing loading state and refreshing state.\r\n * @typedef {Object} LoadingContext\r\n * @property {Function} showLoading - Function to show the loading indicator.\r\n * @property {Function} hideLoading - Function to hide the loading indicator.\r\n * @property {Function} getShouldRefresh - Function to get the current refresh state.\r\n * @property {Function} setShouldRefresh - Function to set the refresh state.\r\n */\r\n\r\nconst LoadingContext = createContext();\r\n\r\n/**\r\n * Provider component for the LoadingContext.\r\n * @param {Object} props - The component props.\r\n * @param {React.ReactNode} props.children - The child components.\r\n * @returns {React.ReactNode} The rendered component.\r\n */\r\nexport const LoadingProvider = ({ children }) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [shouldRef, setShouldRef] = useState(false);\r\n\r\n    /**\r\n     * Function to show the loading indicator.\r\n     */\r\n    const showLoading = () => setLoading(true);\r\n\r\n    /**\r\n     * Function to hide the loading indicator.\r\n     */\r\n    const hideLoading = () => setLoading(false);\r\n\r\n    /**\r\n     * Function to get the current refresh state.\r\n     * @returns {boolean} The current refresh state.\r\n     */\r\n    const getShouldRefresh = () => shouldRef;\r\n\r\n    /**\r\n     * Function to set the refresh state.\r\n     * @param {boolean} should - The new refresh state.\r\n     */\r\n    const setShouldRefresh = (should) => setShouldRef(should);\r\n\r\n    return (\r\n        <LoadingContext.Provider value={{\r\n            showLoading, hideLoading,\r\n            getShouldRefresh, setShouldRefresh\r\n        }}>\r\n            {children}\r\n            {loading && <LoadingIndicator />}\r\n        </LoadingContext.Provider>\r\n    );\r\n};\r\n\r\n/**\r\n * Hook for accessing the LoadingContext.\r\n * @returns {LoadingContext} The LoadingContext.\r\n * @throws {Error} Throws an error if used outside of a LoadingProvider.\r\n */\r\nexport const useLoading = () => {\r\n    const context = useContext(LoadingContext);\r\n    if (!context) {\r\n        throw new Error('useLoading must be used within a LoadingProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n/**\r\n * Component for rendering the loading indicator.\r\n * @returns {React.ReactNode} The rendered component.\r\n */\r\nconst LoadingIndicator = () => (\r\n    <View style={styles.container}>\r\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n    </View>\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        ...StyleSheet.absoluteFillObject,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    },\r\n});\r\n\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/Context.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "typedef",
    "name": "LoadingContext",
    "memberof": "src/Context.jsx",
    "static": true,
    "longname": "src/Context.jsx~LoadingContext",
    "access": "public",
    "description": "Context for managing loading state and refreshing state.",
    "lineNumber": 14,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "showLoading",
        "description": "Function to show the loading indicator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "hideLoading",
        "description": "Function to hide the loading indicator."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getShouldRefresh",
        "description": "Function to get the current refresh state."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "setShouldRefresh",
        "description": "Function to set the refresh state."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LoadingContext"
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "LoadingProvider",
    "memberof": "src/Context.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context.jsx~LoadingProvider",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/Context.jsx",
    "importStyle": "{LoadingProvider}",
    "description": "Provider component for the LoadingContext.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{React.ReactNode} The rendered component."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "The component props."
      },
      {
        "nullable": null,
        "types": [
          "React.ReactNode"
        ],
        "spread": false,
        "optional": false,
        "name": "props.children",
        "description": "The child components."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "React.ReactNode"
      ],
      "spread": false,
      "description": "The rendered component."
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "useLoading",
    "memberof": "src/Context.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context.jsx~useLoading",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/Context.jsx",
    "importStyle": "{useLoading}",
    "description": "Hook for accessing the LoadingContext.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LoadingContext} The LoadingContext."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LoadingContext"
      ],
      "spread": false,
      "description": "The LoadingContext."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if used outside of a LoadingProvider."
      }
    ],
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "LoadingIndicator",
    "memberof": "src/Context.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Context.jsx~LoadingIndicator",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/Context.jsx",
    "importStyle": null,
    "description": "Component for rendering the loading indicator.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{React.ReactNode} The rendered component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "React.ReactNode"
      ],
      "spread": false,
      "description": "The rendered component."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/Context.jsx",
    "static": true,
    "longname": "src/Context.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/Context.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/database/firebaseDBMethods.js",
    "content": "import { collection, getDocs, doc, getDoc, updateDoc, serverTimestamp, arrayUnion, setDoc } from 'firebase/firestore';\r\nimport { db } from './firebase';\r\n\r\n\r\n/**\r\n *  A classe Storage e responsavel por gerenciar as operacoes de acesso, atualizacao e manipulacao de dados no \r\n *  banco de dados Firebase Firestore. Ela abstrai a logica de interacao com o Firestore, proporcionando metodos \r\n *  para realizar operacoes como obter todos os usuarios, criar novos usuarios, obter documentos especificos, \r\n *  atualizar documentos, entre outros.\r\n */\r\nexport default class DBStorage {\r\n    collection = collection(db, 'bankapp');\r\n    allUsersDoc = doc(db, 'bankapp', 'allUsersDoc')\r\n    myDoc;\r\n\r\n    /**\r\n     *  Inicializa instancias dos objetos Firestore necessarios para operacoes subsequentes\r\n        Aceita um parametro opcional docName para especificar o nome do documento a ser manipulado\r\n     * @param {string} docName \r\n     */\r\n    constructor(docName) {\r\n        this.myDoc = doc(db, 'bankapp', docName);\r\n    }\r\n\r\n    /**\r\n     *  Um metodo generico para acessar o banco de dados, utilizado por outros metodos\r\n        Aceita uma funcao func que representa a operacao a ser realizada\r\n        Retorna os dados se isReturn for verdadeiro, caso contrario, retorna true se a operacao for bem-sucedida\r\n     * @param {function} func \r\n     * @param {boolean} isReturn \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    accessDatabase = async (func, isReturn = false) => {\r\n        try {\r\n            const docSnapshot = await func();\r\n            if (isReturn) {\r\n                if (docSnapshot.exists()) {\r\n                    const dadosDoDocumento = docSnapshot.data();\r\n                    let jsonD = JSON.stringify(dadosDoDocumento);\r\n                    return JSON.parse(jsonD);\r\n                } else {\r\n                    console.log('Documento nao encontrado!');\r\n                    return 404;\r\n                }\r\n            } else {\r\n                console.log('Operacao efetuada com sucesso!');\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.log('Erro na acao: ', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Obtem todos os usuarios do documento especifico (allUsersDoc)\r\n     * @returns Um objeto contendo os dados dos usuarios da base\r\n     */\r\n    async getAllUsers() {\r\n        return await this.accessDatabase(async () => await getDoc(this.allUsersDoc), true);\r\n    }\r\n\r\n    /**\r\n     * Adiciona um novo usuario ao array de usuarios no documento especifico (allUsersDoc)\r\n     * @param {object} data \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async createNewUser(data) {\r\n        const out = await this.accessDatabase(async () => {\r\n            await updateDoc(this.allUsersDoc, {\r\n                users: arrayUnion(data)\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Cria um novo documento com nome especifico baseado no email do usuario.\r\n     * @param {string} email \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async createNewUserDoc(email) {\r\n        let newDoc = {\r\n            userData: {\r\n                email: email\r\n            }\r\n        };\r\n\r\n        try {\r\n            const novoDocRef = doc(db, 'bankapp', email);\r\n            await setDoc(novoDocRef, { ...newDoc, createdAt: serverTimestamp() });\r\n            console.log('Novo documento criado com nome especifico com sucesso!');\r\n            return true;\r\n        } catch (error) {\r\n            console.log('Erro ao criar novo documento com nome especifico:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtem todos os documentos na colecao bankapp.\r\n     * @returns Uma lista com os documentos\r\n     */\r\n    async getAllDocs() {\r\n        try {\r\n            const querySnapshot = await getDocs(this.collection);\r\n            const nomesDosDocs = querySnapshot.docs.map((doc) => doc.id);\r\n            return nomesDosDocs;\r\n        } catch (error) {\r\n            console.error('Erro ao obter nomes dos documentos:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtem todos os dados do documento especifico (myDoc)\r\n     * @returns Os dados do documento\r\n     */\r\n    async getFullDoc() {\r\n        return await this.accessDatabase(async () => await getDoc(this.myDoc), true);\r\n    }\r\n\r\n    /**\r\n     * Atualiza o documento especifico (myDoc)\r\n     * @param {object} data \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async updateDoc(data) {\r\n        const out = await this.accessDatabase(async () => {\r\n            await updateDoc(this.myDoc, { ...data, updatedAt: serverTimestamp() });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adiciona um investimento ao valor ja existente no banco\r\n     * @param {object} data \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async appendToInvestments(data) {\r\n        const out = await this.accessDatabase(async () => {\r\n            await updateDoc(this.myDoc, {\r\n                investments: arrayUnion(data)\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adiciona uma receita ao valor ja existente no banco\r\n     * @param {object} data \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async appendToIncomes(data) {\r\n        const out = await this.accessDatabase(async () => {\r\n            await updateDoc(this.myDoc, {\r\n                incomes: arrayUnion(data)\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Adiciona um gasto/uma compra ao valor ja existente no banco\r\n     * @param {object} data \r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async appendToExpenses(data) {\r\n        const out = await this.accessDatabase(async () => {\r\n            await updateDoc(this.myDoc, {\r\n                expenses: arrayUnion(data)\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Deleta um documento especifico da colecao\r\n     * @param {number} index\r\n     * @returns Se a operacao teve sucesso\r\n     */\r\n    async deleteContent(index) {\r\n        try {\r\n            this.collection.doc(index).delete();\r\n            return 'Dados deletados com sucesso!';\r\n        } catch (e) {\r\n            return 'Ocorreu um problema ao deletar os dados da nuvem!\\n' + e;\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/database/firebaseDBMethods.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "DBStorage",
    "memberof": "src/database/firebaseDBMethods.js",
    "static": true,
    "longname": "src/database/firebaseDBMethods.js~DBStorage",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/database/firebaseDBMethods.js",
    "importStyle": "DBStorage",
    "description": " A classe Storage e responsavel por gerenciar as operacoes de acesso, atualizacao e manipulacao de dados no \n banco de dados Firebase Firestore. Ela abstrai a logica de interacao com o Firestore, proporcionando metodos \n para realizar operacoes como obter todos os usuarios, criar novos usuarios, obter documentos especificos, \n atualizar documentos, entre outros.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "collection",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#collection",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "allUsersDoc",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#allUsersDoc",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "myDoc",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#myDoc",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#constructor",
    "access": "public",
    "description": " Inicializa instancias dos objetos Firestore necessarios para operacoes subsequentes\nAceita um parametro opcional docName para especificar o nome do documento a ser manipulado",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "docName",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "accessDatabase",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#accessDatabase",
    "access": "public",
    "description": " Um metodo generico para acessar o banco de dados, utilizado por outros metodos\nAceita uma funcao func que representa a operacao a ser realizada\nRetorna os dados se isReturn for verdadeiro, caso contrario, retorna true se a operacao for bem-sucedida",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isReturn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getAllUsers",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#getAllUsers",
    "access": "public",
    "description": " Obtem todos os usuarios do documento especifico (allUsersDoc)",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Um objeto contendo os dados dos usuarios da base"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Um objeto contendo os dados dos usuarios da base"
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "createNewUser",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#createNewUser",
    "access": "public",
    "description": "Adiciona um novo usuario ao array de usuarios no documento especifico (allUsersDoc)",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "createNewUserDoc",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#createNewUserDoc",
    "access": "public",
    "description": "Cria um novo documento com nome especifico baseado no email do usuario.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getAllDocs",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#getAllDocs",
    "access": "public",
    "description": "Obtem todos os documentos na colecao bankapp.",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Uma lista com os documentos"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Uma lista com os documentos"
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getFullDoc",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#getFullDoc",
    "access": "public",
    "description": "Obtem todos os dados do documento especifico (myDoc)",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Os dados do documento"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Os dados do documento"
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "updateDoc",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#updateDoc",
    "access": "public",
    "description": "Atualiza o documento especifico (myDoc)",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "appendToInvestments",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#appendToInvestments",
    "access": "public",
    "description": "Adiciona um investimento ao valor ja existente no banco",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "appendToIncomes",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#appendToIncomes",
    "access": "public",
    "description": "Adiciona uma receita ao valor ja existente no banco",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "appendToExpenses",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#appendToExpenses",
    "access": "public",
    "description": "Adiciona um gasto/uma compra ao valor ja existente no banco",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "deleteContent",
    "memberof": "src/database/firebaseDBMethods.js~DBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/database/firebaseDBMethods.js~DBStorage#deleteContent",
    "access": "public",
    "description": "Deleta um documento especifico da colecao",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Se a operacao teve sucesso"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Se a operacao teve sucesso"
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/database/firebaseStorageMethods.js",
    "content": "import { storage } from './firebase';\r\nimport { ref, getDownloadURL, getMetadata } from \"firebase/storage\";\r\nimport fetch from 'node-fetch';\r\n\r\n\r\nexport default class Storage {\r\n\r\n    folder;\r\n\r\n    constructor(reference) {\r\n        this.folder = reference;\r\n    }\r\n\r\n    getFileMetadata = async (filename) => {\r\n        const mtd = await getMetadata(ref(storage, `${this.folder}/${filename}`));\r\n        return mtd;\r\n    }\r\n\r\n    downloadFileUrl = async (filename) => {\r\n        const url = await getDownloadURL(ref(storage, `${this.folder}/${filename}`));\r\n        return url;\r\n    }\r\n\r\n    uploadFile = async (uri, name, metadata) => {\r\n        \r\n        let body = new FormData();\r\n        body.append('photo', { uri: uri, name: name, filename: name, type: metadata.contentType });\r\n        body.append('Content-Type', metadata.contentType);\r\n\r\n        const url = `https://firebasestorage.googleapis.com/v0/b/devmovem-final.appspot.com/o?uploadType=media&name=${this.folder}%2F${name}`;\r\n        const resp = await fetch(url, {\r\n            method: 'POST', headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            }, \r\n            body: body,\r\n        });\r\n\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/database/firebaseStorageMethods.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Storage",
    "memberof": "src/database/firebaseStorageMethods.js",
    "static": true,
    "longname": "src/database/firebaseStorageMethods.js~Storage",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/database/firebaseStorageMethods.js",
    "importStyle": "Storage",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "folder",
    "memberof": "src/database/firebaseStorageMethods.js~Storage",
    "static": false,
    "longname": "src/database/firebaseStorageMethods.js~Storage#folder",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/database/firebaseStorageMethods.js~Storage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/database/firebaseStorageMethods.js~Storage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "getFileMetadata",
    "memberof": "src/database/firebaseStorageMethods.js~Storage",
    "static": false,
    "longname": "src/database/firebaseStorageMethods.js~Storage#getFileMetadata",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "downloadFileUrl",
    "memberof": "src/database/firebaseStorageMethods.js~Storage",
    "static": false,
    "longname": "src/database/firebaseStorageMethods.js~Storage#downloadFileUrl",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "uploadFile",
    "memberof": "src/database/firebaseStorageMethods.js~Storage",
    "static": false,
    "longname": "src/database/firebaseStorageMethods.js~Storage#uploadFile",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/Main.jsx",
    "content": "\r\n/**\r\n * Main component for the application.\r\n * Renders the navigation stack and provides loading context.\r\n *\r\n * @component\r\n * return (\r\n *   <Main />\r\n * )\r\n */\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { LoadingProvider } from './Context';\r\n\r\n\r\nimport AuthScreen from './screens/AuthScreen';\r\nimport SplashScreen from './screens/subscreens/SplashScreen';\r\nimport Home from './screens/Home';\r\nimport Profile from './screens/Profile';\r\nimport Settings from './screens/Settings';\r\nimport SaveInvestments from './screens/subscreens/SaveInvestment';\r\nimport Money from './screens/subscreens/resources/Money';\r\nimport Graphs from './screens/subscreens/resources/Graphs';\r\nimport InvestmentsCheckbox from './screens/subscreens/InvestmentsCheckbox';\r\nimport EventsMap from './screens/subscreens/resources/EventsMap';\r\nimport UploadPic from './screens/subscreens/UploadPic';\r\nimport ChangeProfilePic from './screens/subscreens/ChangeProfilePic';\r\nimport SeePicture from './screens/subscreens/resources/SeePicture';\r\nimport MoreOptions from './components/homeComponents/MoreOptions';\r\nimport MapLoadingScreen from './screens/subscreens/resources/MapLoadingScreen';\r\nimport TypeOfPic from './screens/subscreens/TypeOfPic';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\n\r\nexport default function Main() {\r\n\r\n\r\n    let opt = {\r\n        headerShown: false\r\n    }\r\n\r\n    return (\r\n        <NavigationContainer>\r\n            <LoadingProvider>\r\n                <Stack.Navigator initialRouteName=\"Home\" screenOptions={{ headerShown: false }}>\r\n                    <Stack.Screen options={opt} name=\"Auth\" component={AuthScreen} />\r\n                    <Stack.Screen options={opt} name=\"Home\" component={Home} />\r\n                    <Stack.Screen options={opt} name=\"Profile\" component={Profile} />\r\n                    <Stack.Screen options={opt} name=\"Settings\" component={Settings} />\r\n                    <Stack.Screen options={opt} name=\"SaveInvestments\" component={SaveInvestments} />\r\n                    <Stack.Screen options={opt} name=\"Graphs\" component={Graphs} />\r\n                    <Stack.Screen options={opt} name=\"Money\" component={Money} />\r\n                    <Stack.Screen options={opt} name=\"Splash\" component={SplashScreen} />\r\n                    <Stack.Screen options={opt} name=\"checkbox\" component={InvestmentsCheckbox} />\r\n                    <Stack.Screen options={opt} name=\"map\" component={EventsMap} />\r\n                    <Stack.Screen options={opt} name=\"MapLoadingScreen\" component={MapLoadingScreen} />\r\n                    <Stack.Screen options={opt} name=\"UploadPic\" component={UploadPic} />\r\n                    <Stack.Screen options={opt} name=\"ChangeProfilePic\" component={ChangeProfilePic} />\r\n                    <Stack.Screen options={opt} name=\"SeePicture\" component={SeePicture} />\r\n                    <Stack.Screen options={opt} name=\"MoreOptions\" component={MoreOptions} />\r\n                    <Stack.Screen options={opt} name=\"TypeOfPic\" component={TypeOfPic} />\r\n                </Stack.Navigator>\r\n            </LoadingProvider>\r\n        </NavigationContainer>\r\n    );\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/Main.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "Stack",
    "memberof": "src/Main.jsx",
    "static": true,
    "longname": "src/Main.jsx~Stack",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/Main.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "Main",
    "memberof": "src/Main.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Main.jsx~Main",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/Main.jsx",
    "importStyle": "Main",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/screens/AuthScreen.jsx",
    "content": "\r\n/**\r\n * AuthScreen component for user authentication.\r\n * @module AuthScreen\r\n * @param {object} navigation - The navigation object from React Navigation.\r\n * @returns {JSX.Element} AuthScreen component.\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TextInput, StatusBar, StyleSheet, Image, TouchableOpacity, KeyboardAvoidingView, ScrollView, Keyboard } from 'react-native';\r\nimport { useLoading } from '../Context';\r\nimport { Foundation } from '@expo/vector-icons';\r\nimport DBStorage from '../database/firebaseDBMethods';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 80 : 200\r\n\r\nexport default function AuthScreen({ navigation }) {\r\n    const { showLoading, hideLoading } = useLoading();\r\n    const fr = new DBStorage(\"allUsersDoc\");\r\n\r\n    //#region UseState\r\n    const [allUsers, setAllUsers] = useState([]);\r\n\r\n    const [signUpMessage, setSignUpMessage] = useState(\"\");\r\n    const [msgDisp, setMsgDisp] = useState(false)\r\n    const [resetElement, setResetElement] = useState(false)\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [password2, setPassword2] = useState('');\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showPassword2, setShowPassword2] = useState(false);\r\n    const [icon, setIcon] = useState(\"eye-off\");\r\n    const [icon2, setIcon2] = useState(\"eye-off\");\r\n\r\n    const [isSingUp, setIsSignUp] = useState(false);\r\n\r\n    //#endregion\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            const auth = await AsyncStorage.getItem('isAuth');\r\n\r\n            if (auth === \"true\") {\r\n                navigation.navigate(\"Splash\");\r\n            } else {\r\n                try {\r\n                    showLoading();\r\n                    var docs = await fr.getAllUsers();\r\n                    setAllUsers(docs.users);\r\n                    hideLoading();\r\n                } catch (err) { console.log(err) } finally { hideLoading(); }\r\n            }\r\n        };\r\n        getUsers();\r\n    }, [])\r\n\r\n    const clearFields = (clearMsg = true) => {\r\n        setIsSignUp(false);\r\n        if (clearMsg) {\r\n            setMsgDisp(false);\r\n            setSignUpMessage(\"\");\r\n        }\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        setPassword2(\"\");\r\n        setResetElement(false);\r\n        setShowPassword(false);\r\n        setShowPassword2(false);\r\n        setIcon(\"eye-off\");\r\n        setIcon2(\"eye-off\");\r\n    }\r\n\r\n    const handleSignUp = async () => {\r\n        Keyboard.dismiss();\r\n        if (password === \"\" || email === \"\") {\r\n            setSignUpMessage(\"O email/senha não podem estar vazios!\");\r\n            setMsgDisp(true);\r\n        } else {\r\n            setIsSignUp(true);\r\n            if (password === password2) {\r\n                try {\r\n                    showLoading();\r\n                    let shouldRegister = true;\r\n                    if (allUsers != undefined) {\r\n                        allUsers.forEach(element => {\r\n                            if (element.email === email) {\r\n                                shouldRegister = false;\r\n                                setSignUpMessage(\"Email ja cadastrado!\");\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (shouldRegister) {\r\n                        await fr.createNewUser({\r\n                            email: email,\r\n                            pass: password\r\n                        });\r\n\r\n                        await fr.createNewUserDoc(email);\r\n                        const fr2 = new DBStorage(email);\r\n                        await fr2.updateDoc({\r\n                            userData: {\r\n                                email: email,\r\n                                name: email\r\n                            }\r\n                        })\r\n                        await AsyncStorage.setItem('isAuth', \"true\");\r\n                        await AsyncStorage.setItem('isNew', \"true\");\r\n                        await AsyncStorage.setItem('userDoc', email);\r\n                        clearFields();\r\n                        navigation.navigate('Splash');\r\n                    }\r\n\r\n                } catch (error) {\r\n                    setSignUpMessage(\"Houve um problema no cadastro\");\r\n                    setMsgDisp(true);\r\n                    console.log('Erro no cadastro:', error.message);\r\n                } finally {\r\n                    hideLoading();\r\n                }\r\n            } else {\r\n                setSignUpMessage(\"As senhas são diferentes!\");\r\n                setMsgDisp(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSignIn = async () => {\r\n        Keyboard.dismiss();\r\n        if (!email || email.trim() === \"\") {\r\n            setSignUpMessage(\"O email nao pode estar vazio!\");\r\n            setMsgDisp(true);\r\n        } else if (!password || password.trim() === \"\") {\r\n            setSignUpMessage(\"A senha nao pode estar vazia!\");\r\n            setMsgDisp(true);\r\n        } else {\r\n            try {\r\n                const userExists = allUsers.find(param => param.email === email);\r\n                if (!userExists) {\r\n                    setSignUpMessage(\"Email nao encontrado\");\r\n                    setMsgDisp(true);\r\n                    clearFields(false);\r\n                } else {\r\n                    if (userExists.pass === password) {\r\n                        await AsyncStorage.setItem('userDoc', email);\r\n                        clearFields();\r\n                        await AsyncStorage.setItem('isAuth', \"true\");\r\n                        navigation.navigate('Splash');\r\n                    } else {\r\n                        setSignUpMessage(\"Senha incorreta\");\r\n                        setResetElement(true);\r\n                    }\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error('Erro no login:', error.message);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const togglePasswordVisibility = () => {\r\n        setShowPassword(!showPassword);\r\n        if (showPassword) {\r\n            setIcon(\"eye-off\");\r\n        } else {\r\n            setIcon(\"eye\");\r\n        }\r\n    };\r\n\r\n    const togglePasswordVisibility2 = () => {\r\n        setShowPassword2(!showPassword2);\r\n        if (showPassword2) {\r\n            setIcon2(\"eye-off\");\r\n        } else {\r\n            setIcon2(\"eye\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <KeyboardAvoidingView\r\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n            style={{ flex: 1 }}\r\n        >\r\n            <ScrollView style={{ marginTop: statusBarHeight }}>\r\n                <View style={{ justifyContent: 'center', flexDirection: 'row', marginTop: 32 }}>\r\n                    <Image style={{ width: 100, height: 100 }} source={require('./../static/imgs/logo.png')} />\r\n                </View>\r\n                <View style={{ marginHorizontal: 10 }}>\r\n                    <View style={{ marginVertical: 10 }}>\r\n                        <Text style={styles.label}>Email:</Text>\r\n                        <TextInput style={styles.input}\r\n                            placeholder=\"Digite seu email\"\r\n                            onChangeText={(text) => setEmail(text)}\r\n                            value={email}\r\n                            autoCapitalize=\"none\"\r\n                            keyboardType=\"email-address\"\r\n                        />\r\n                        <Text style={styles.label}>Senha:</Text>\r\n                        <View>\r\n                            <TouchableOpacity onPress={togglePasswordVisibility} style={styles.eye}>\r\n                                <Ionicons name={icon} size={34} color=\"darkblue\" />\r\n                            </TouchableOpacity>\r\n                            <TextInput style={styles.input}\r\n                                placeholder=\"Digite sua senha\"\r\n                                onChangeText={(text) => setPassword(text)}\r\n                                secureTextEntry={!showPassword}\r\n                                value={password}\r\n                                autoCapitalize=\"none\"\r\n                            />\r\n                        </View>\r\n                        {isSingUp ?\r\n                            <View>\r\n                                <TouchableOpacity onPress={togglePasswordVisibility2} style={styles.eye}>\r\n                                    <Ionicons name={icon2} size={34} color=\"darkblue\" />\r\n                                </TouchableOpacity>\r\n                                <TextInput style={styles.input}\r\n                                    placeholder=\"Confirme sua senha\"\r\n                                    onChangeText={(text) => setPassword2(text)}\r\n                                    secureTextEntry={!showPassword2}\r\n                                    value={password2}\r\n                                />\r\n                            </View> : <Text></Text>\r\n                        }\r\n                    </View>\r\n                    <TouchableOpacity style={styles.btn} onPress={handleSignIn}>\r\n                        <Text style={{ textAlign: 'center' }}>Login</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={styles.btn} onPress={handleSignUp}>\r\n                        <Text style={{ textAlign: 'center' }}>Cadastrar</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                {(msgDisp ?\r\n                    <View style={styles.msgDispSt}>\r\n                        <Foundation name=\"x-circle\" size={30} color=\"#8a0000\" style={{ marginRight: 5 }} />\r\n                        <Text style={{ color: '#8a0000', fontSize: 20 }}>{signUpMessage}</Text>\r\n                    </View>\r\n\r\n                    : <Text></Text>)}\r\n\r\n                {resetElement ? <TouchableOpacity onPress={() => { alert(\"Que pena :(\") }}>\r\n                    <Text style={{ color: 'darkblue', textDecorationLine: 'underline', marginLeft: 16, fontSize: 18, marginTop: 16 }}>\r\n                        Esqueci minha senha</Text>\r\n                </TouchableOpacity> : <Text></Text>}\r\n            </ScrollView >\r\n        </KeyboardAvoidingView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    label: {\r\n        fontSize: 24\r\n    },\r\n    input: {\r\n        borderWidth: 1,\r\n        borderColor: 'blue',\r\n        padding: 10,\r\n        fontSize: 18,\r\n        marginBottom: 15\r\n    },\r\n    eye: {\r\n        position: 'absolute',\r\n        bottom: 10,\r\n        right: 12,\r\n        padding: 10,\r\n        zIndex: 99\r\n    },\r\n    btn: {\r\n        width: 200,\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        borderColor: 'darkblue',\r\n        paddingVertical: 12,\r\n        paddingHorizontal: 12,\r\n        justifyContent: 'center',\r\n        alignSelf: 'center',\r\n        marginBottom: 18\r\n    },\r\n    msgDispSt: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 24,\r\n        paddingHorizontal: 5,\r\n        flexWrap: 'wrap'\r\n    }\r\n})",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/AuthScreen.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/AuthScreen.jsx",
    "static": true,
    "longname": "src/screens/AuthScreen.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/AuthScreen.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "AuthScreen",
    "memberof": "src/screens/AuthScreen.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/AuthScreen.jsx~AuthScreen",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/AuthScreen.jsx",
    "importStyle": "AuthScreen",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/AuthScreen.jsx",
    "static": true,
    "longname": "src/screens/AuthScreen.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/AuthScreen.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/screens/Home.jsx",
    "content": "import React, { useState, useEffect } from 'react';\r\nimport { ScrollView, StatusBar, RefreshControl } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useLoading } from '../Context';\r\nimport DBStorage from './../database/firebaseDBMethods';\r\nimport Balance from '../components/homeComponents/Balance';\r\nimport Header from '../components/homeComponents/Header';\r\nimport Menu from '../components/homeComponents/Menu';\r\nimport Movements from '../components/homeComponents/Movements';\r\nimport { Accelerometer, Gyroscope } from 'expo-sensors';\r\nimport Toast from 'react-native-toast-message';\r\n\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight : 64\r\n\r\nexport default function Home({ navigation }) {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const { showLoading, hideLoading, getShouldRefresh, setShouldRefresh } = useLoading();\r\n  const [moneyGraph, SetMoneyGraph] = useState([{}]);\r\n\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n\r\n  const refresh = async () => {\r\n    await AsyncStorage.setItem('userDoc', 'user_0');\r\n    const doc = await AsyncStorage.getItem('userDoc');\r\n    const fr = new DBStorage(doc);\r\n    let res = await fr.getFullDoc();\r\n    await AsyncStorage.setItem('fullUserData', JSON.stringify(res))\r\n  };\r\n\r\n  const [userData, setUserData] = useState({});\r\n\r\n  const [money, setMoney] = useState([]);\r\n  const [income, setIncome] = useState(0);\r\n  const [negative, setNegative] = useState(0);\r\n\r\n  const [msg, setMsg] = useState('');\r\n\r\n\r\n  const parseDate = (dateString) => {\r\n    if (dateString) {\r\n      const [day, month, year] = dateString.split('/');\r\n      return new Date(`${year}-${month}-${day}`);\r\n    } else {\r\n      return new Date();\r\n    }\r\n  };\r\n\r\n\r\n  const [showBalanceTip, setBalanceTip] = useState(false);\r\n  const [showMenuTip, setShowMenuTip] = useState(false);\r\n  const [showMovementsTip, setShowMovementsTip] = useState(false);\r\n  const [showSettingsTip, setShowSettingsTip] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsRefresh(true);\r\n    let res;\r\n    const getAllData = async () => {\r\n      //remove bellow this line\r\n      await AsyncStorage.setItem('userDoc', 'user_0');\r\n      const doc = await AsyncStorage.getItem('userDoc');\r\n      const fr = new DBStorage(doc);\r\n      const dadosDoBanco = await fr.getFullDoc(doc);\r\n      await AsyncStorage.setItem('fullUserData', JSON.stringify(dadosDoBanco));\r\n      //remove above this line\r\n      let isNew = await AsyncStorage.getItem('isNew');\r\n\r\n      if (isNew === 'true') {\r\n        setBalanceTip(true);\r\n        await AsyncStorage.removeItem('isNew');\r\n      };\r\n\r\n      try {\r\n        showLoading();\r\n        if (getShouldRefresh()) {\r\n          const doc = await AsyncStorage.getItem('userDoc');\r\n          const fr = new DBStorage(doc);\r\n          const dadosDoBanco = await fr.getFullDoc(doc);\r\n          await AsyncStorage.setItem('fullUserData', JSON.stringify(dadosDoBanco));\r\n          setShouldRefresh(false);\r\n        }\r\n\r\n        const fullRes = await AsyncStorage.getItem('fullUserData');\r\n        res = JSON.parse(fullRes);\r\n\r\n        if (res) {\r\n          setUserData(res.userData);\r\n\r\n          let allIncomes = [];\r\n          let incomeSum = 0;\r\n          if (res.incomes) {\r\n            res.incomes.forEach(element => {\r\n              allIncomes.push({\r\n                ...element,\r\n                type: 1\r\n              })\r\n              incomeSum += parseFloat(element.value);\r\n            });\r\n          }\r\n          setIncome(incomeSum.toFixed(2));\r\n\r\n          let allExpenses = [];\r\n          let expenseSum = 0;\r\n          if (res.expenses) {\r\n            res.expenses.forEach(element => {\r\n              allExpenses.push({\r\n                ...element,\r\n                type: 0\r\n              })\r\n              expenseSum += parseFloat(element.value);\r\n            });\r\n          }\r\n          setNegative(expenseSum.toFixed(2));\r\n\r\n          let allMoney = [...allIncomes, ...allExpenses];\r\n\r\n          SetMoneyGraph({\r\n            incomes: allIncomes,\r\n            expenses: allExpenses,\r\n            moneyFlow: [\r\n              {\r\n                name: \"incomes\",\r\n                value: incomeSum.toFixed(2)\r\n              },\r\n              {\r\n                name: \"expenses\",\r\n                value: expenseSum.toFixed(2)\r\n              }\r\n            ],\r\n          })\r\n\r\n          const listaOrdenada = allMoney.sort((a, b) => {\r\n            const dataA = parseDate(a.date);\r\n            const dataB = parseDate(b.date);\r\n            return dataB - dataA;\r\n          });\r\n\r\n          setMoney(listaOrdenada);\r\n          setMsg(\"\")\r\n        } else {\r\n          setMsg('Nenhum dado encontrado!');\r\n        }\r\n\r\n      } catch (err) {\r\n        console.log(err);\r\n        setMsg('Nenhum dado encontrado!');\r\n      } finally {\r\n        setShouldRefresh(false);\r\n        hideLoading();\r\n        setRefreshing(false);\r\n      }\r\n      setIsRefresh(false);\r\n    };\r\n\r\n    getAllData().catch(console.error);\r\n\r\n  }, [refreshing]);\r\n\r\n\r\n\r\n  const [acceleration, setAcceleration] = useState({ x: 0, y: 0, z: 0 });\r\n  const [{ x, y, z }, setGyroscope] = useState({ x: 0, y: 0, z: 0 });\r\n  const [{ rx, ry, rz }, setRound] = useState({ rx: 0, ry: 0, rz: 0, });\r\n\r\n  Accelerometer.setUpdateInterval(800);\r\n  Gyroscope.setUpdateInterval(800);\r\n\r\n  useEffect(() => {\r\n    Accelerometer.addListener(setAcceleration);\r\n    Gyroscope.addListener(setGyroscope);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    const beforeX = x;\r\n    const beforeY = y;\r\n    const beforeZ = z;\r\n    const rx = Number((x).toFixed(2)) * 100;\r\n    const ry = Number((y).toFixed(2)) * 100;\r\n    const rz = Number((z).toFixed(2)) * 100;\r\n    setRound({ rx, ry, rz });\r\n    console.log(rx, ry, rz);\r\n    console.log(ry-y)\r\n    if (Math.abs(ry - beforeY) > 100) {\r\n      console.log('Girou para a direita');\r\n      Toast.show({ type: 'warning', text2: 'Esse aplicativo não permite a rotação de tela' });\r\n    }\r\n  }, [x]);\r\n\r\n\r\n  const onRefresh = async () => {\r\n    setIsRefresh(true);\r\n    setRefreshing(true);\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={{ marginTop: statusBarHeight, flex: 1 }} refreshControl={\r\n      <RefreshControl\r\n        refreshing={refreshing}\r\n        onRefresh={onRefresh}\r\n        colors={['#0000ff']}\r\n        tintColor=\"#0000ff\" />}>\r\n      <Header refresh={refresh} isRefresh={setIsRefresh} isRef={isRefresh} userData={userData} navigation={navigation} />\r\n\r\n      <Balance showBalanceTip={showBalanceTip} setBalanceTip={setBalanceTip}\r\n        setShowMenuTip={setShowMenuTip} income={income} negative={negative} />\r\n\r\n      <Menu refresh={refresh} isRefresh={setIsRefresh} isRef={isRefresh} navigation={navigation} moneyGraph={moneyGraph}\r\n        showMenuTip={showMenuTip} setTip={() => { setShowMovementsTip(true); setShowMenuTip(false); }}\r\n        showSettingsTip={showSettingsTip} setShowSettingsTip={setShowSettingsTip} />\r\n\r\n      <Movements money={money} showMovementsTip={showMovementsTip} msg={msg}\r\n        setShowMovementsTip={() => { setShowMovementsTip(false); setShowSettingsTip(true); }} />\r\n      <Toast />\r\n    </ScrollView>\r\n  );\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/Home.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/Home.jsx",
    "static": true,
    "longname": "src/screens/Home.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/Home.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "Home",
    "memberof": "src/screens/Home.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/Home.jsx~Home",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/Home.jsx",
    "importStyle": "Home",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/screens/Profile.jsx",
    "content": "\r\n/**\r\n * @file Profile.jsx\r\n * @desc This file contains the Profile screen component.\r\n * The Profile screen displays user information such as name, email, profession, investment profile, and a list of investments.\r\n * Users can also view and change their profile picture.\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, StatusBar, Text, StyleSheet, TouchableOpacity, ScrollView, Image, Modal, RefreshControl } from 'react-native';\r\nimport { Feather, MaterialIcons } from '@expo/vector-icons';\r\nimport DBStorage from '../database/firebaseDBMethods';\r\nimport { useLoading } from '../Context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport Toast from 'react-native-toast-message';\r\n\r\n/**\r\n * @function Perfil\r\n * @desc Profile screen component\r\n * @param {object} navigation - Navigation object for navigating between screens\r\n * @returns {JSX.Element} Profile screen component\r\n */\r\nexport default function Perfil({ navigation }) {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const [profilePic, setProfilePic] = useState(null);\r\n  const [showProfilePic, setShowProfilePic] = useState(false);\r\n\r\n  const { showLoading, hideLoading, setShouldRefresh } = useLoading();\r\n  const [dados, setDados] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    perfilInvestimento: \"\",\r\n    profissao: \"\"\r\n  });\r\n  const [investimentos, setInvestimentos] = useState([{\r\n    label: \"\",\r\n    status: 0,\r\n    value: \"\",\r\n    interest: true\r\n  }]);\r\n\r\n  const [refreshProf, setRefreshProf] = useState(false);\r\n\r\n  /**\r\n   * @function getAllData\r\n   * @desc Fetches user data and investments from AsyncStorage and Firestore\r\n   */\r\n  useEffect(() => {\r\n    const getAllData = async () => {\r\n      reloadPic();\r\n      const doc = await AsyncStorage.getItem('userDoc');\r\n      const fr = new DBStorage(doc);\r\n\r\n      try {\r\n        showLoading();\r\n        let res = await fr.getFullDoc();\r\n        if (res) {\r\n          let uD = res.userData;\r\n          let inv = res.investments;\r\n          let invs = []\r\n          if (inv) {\r\n            inv.forEach(element => {\r\n              invs.push({\r\n                interest: element.interest,\r\n                label: element.label,\r\n                status: element.status, // 1=queda, 0=crescimento\r\n                value: parseFloat(element.value).toFixed(2)\r\n              })\r\n            });\r\n          }\r\n          setDados(uD);\r\n          setInvestimentos(invs);\r\n        } else {\r\n          console.log(res)\r\n        }\r\n        setShouldRefresh(false);\r\n      } catch (err) { console.log(err); } finally { hideLoading(); }\r\n    };\r\n\r\n    getAllData().catch(console.error);\r\n  }, [refreshProf, profilePic]);\r\n\r\n  const reloadPic = async () => {\r\n    const profPic = await AsyncStorage.getItem('profilePic');\r\n    if (profPic) {\r\n      setProfilePic(profPic);\r\n      setShowProfilePic(true);\r\n    }\r\n  }\r\n\r\n  const onRefresh = async () => {\r\n    setRefreshing(true);\r\n    await reloadPic();\r\n    setTimeout(() => {\r\n      setRefreshing(false);\r\n    }, 2000);\r\n  };\r\n\r\n\r\n  return (\r\n    <View>\r\n      <ScrollView refreshControl={\r\n        <RefreshControl\r\n          refreshing={refreshing}\r\n          onRefresh={onRefresh}\r\n          colors={['#0000ff']}\r\n          tintColor=\"#0000ff\" />}>\r\n        <View style={{ height: '100%', marginTop: statusBarHeight }} >\r\n          <View style={styles.container}>\r\n            <View style={styles.content}>\r\n              <Text\r\n                style={styles.userName}\r\n                from={{ translateX: -300 }}\r\n                animate={{ translateX: 0 }}\r\n                transition={{ type: 'timing', duration: 1000, delay: 300 }}>\r\n                {dados.name + '\\n'}\r\n                <Text style={styles.label}>{dados.email}</Text>\r\n              </Text>\r\n\r\n              <TouchableOpacity\r\n                activeOpacity={0.9}\r\n                style={styles.btnUser}\r\n                onPress={() => {\r\n                  setModalVisible(true);\r\n                }}>\r\n                {showProfilePic ?\r\n                  <Image source={{ uri: profilePic }} style={styles.header_profilePic} /> :\r\n                  <Feather name=\"user\" size={27} color={'#fff'} />}\r\n\r\n                <Modal animationType=\"slide-up\" transparent={true} visible={modalVisible} \r\n                  style={styles.modal} onRequestClose={() => { setModalVisible(!modalVisible); }}>\r\n                  <TouchableOpacity style={styles.modalBackground} activeOpacity={1} onPressOut={() => setModalVisible(!modalVisible)} >\r\n                    <View style={styles.modalContent}>\r\n                      \r\n                      <TouchableOpacity style={styles.modalOpt} onPress={() => {\r\n                        setModalVisible(false);\r\n                        navigation.navigate(\"SeePicture\", { photoUrl: profilePic })\r\n                      }}>\r\n                        <Text style={styles.modalOptTxt}>Ver foto</Text>\r\n                      </TouchableOpacity>\r\n                      \r\n                      <TouchableOpacity style={styles.modalOpt} onPress={() => { setModalVisible(false); navigation.navigate(\"TypeOfPic\") }}>\r\n                        <Text style={styles.modalOptTxt}>Alterar foto</Text>\r\n                      </TouchableOpacity>\r\n                      \r\n                      <TouchableOpacity onPress={() => setModalVisible(!modalVisible)} style={styles.close}>\r\n                        <FontAwesome style={styles.closeButtonText} name=\"close\" size={28} color=\"darkblue\" />\r\n                      </TouchableOpacity>\r\n                    </View>\r\n                  </TouchableOpacity>\r\n                </Modal>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.data}>\r\n            <Text style={styles.text}>\r\n              Profissão:\r\n              <Text style={styles.insiderText}>{' ' + dados.profissao}</Text>\r\n            </Text>\r\n\r\n            <Text style={styles.text}>\r\n              Perfil de investimento:\r\n              <Text style={styles.insiderText}>\r\n                {' ' + dados.perfilInvestimento}\r\n              </Text>\r\n            </Text>\r\n\r\n            <View style={{ marginTop: 10 }}>\r\n              <Text style={styles.text}>Ações de Interesse </Text>\r\n\r\n              <ScrollView>\r\n                {investimentos.map((item, index) => (\r\n                  item.interest ?\r\n                    <View style={styles.inv_container} key={index}>\r\n                      <View style={styles.inv_content} key={index}>\r\n                        <Text style={styles.inv_label} key={index}>{item.label}</Text>\r\n                        <View>\r\n                          <Text key={index}\r\n                            style={\r\n                              item.status == 0\r\n                                ? styles.inv_value\r\n                                : styles.inv_expenses\r\n                            }>\r\n                            {item.status == 0\r\n                              ? `${item.value}%`\r\n                              : `-${item.value}%`}\r\n                          </Text>\r\n                        </View>\r\n                      </View>\r\n                    </View> : <View key={index}></View>\r\n                ))}\r\n              </ScrollView>\r\n\r\n              <View\r\n                style={{ marginTop: 30, flexDirection: 'row' }}>\r\n                <TouchableOpacity onPress={() => {\r\n                  navigation.navigate(\"checkbox\",\r\n                    { invs: investimentos, refreshProfile: () => { setRefreshProf(!refreshProf); } })\r\n                }}>\r\n                  <View style={styles.addView}>\r\n                    <Text style={{ paddingRight: 8, paddingTop: 3, fontSize: 12 }}>\r\n                      Alterar\r\n                    </Text>\r\n\r\n                    <Feather name=\"refresh-cw\" size={18} color=\"darkblue\" />\r\n                  </View>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n        </View>\r\n      </ScrollView>\r\n      <View style={styles._homeBtnView}>\r\n        <TouchableOpacity\r\n          style={styles._homeBtn}\r\n          onPress={() => {\r\n            navigation.navigate('Home');\r\n          }}>\r\n          <MaterialIcons name=\"home\" size={30} color=\"#fff\" />\r\n        </TouchableOpacity>\r\n      </View>\r\n      <Toast />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  closeButtonText: {\r\n    textAlign: 'right'\r\n  },\r\n  modalOptTxt: {\r\n    fontSize: 20,\r\n    color: 'darkblue'\r\n  },\r\n  modalBackground: {\r\n    flex: 0,\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end',\r\n    zIndex: 999,\r\n  },\r\n  modalContent: {\r\n    borderRadius: 10,\r\n    width: 200,\r\n    elevation: 100,\r\n    position: 'absolute',\r\n    right: 40,\r\n    top: 70\r\n  },\r\n  modalOpt: {\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#c5c5c5',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 5,\r\n    backgroundColor: 'rgba(166, 166, 166, 0.8)',\r\n    borderRadius: 6,\r\n    marginBottom: 5\r\n  },\r\n\r\n  header_profilePic: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 100,\r\n    borderWidth: 1,\r\n  },\r\n  addView: {\r\n    flexDirection: 'row',\r\n    borderWidth: 1,\r\n    borderColor: 'darkblue',\r\n    borderRadius: 5,\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    alignContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  text: {\r\n    fontWeight: 'bold',\r\n    fontSize: 20,\r\n    paddingTop: 5,\r\n    paddingBottom: 5,\r\n    marginBottom: 10,\r\n    color: 'darkblue',\r\n  },\r\n  insiderText: {\r\n    color: '#000',\r\n    fontWeight: 'normal',\r\n  },\r\n  container: {\r\n    backgroundColor: 'darkblue',\r\n    flexDirection: 'row',\r\n    paddingVertical: 40,\r\n    paddingHorizontal: 24,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  userName: {\r\n    fontSize: 18,\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    marginTop: 5,\r\n  },\r\n  btnUser: {\r\n    width: 44,\r\n    height: 44,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderRadius: 44 / 2,\r\n  },\r\n  data: {\r\n    color: '#dadada',\r\n    padding: 15,\r\n  },\r\n  label: {\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    paddingTop: 5,\r\n    marginTop: 5,\r\n  },\r\n  list: {\r\n    marginStart: 14,\r\n    marginEnd: 14,\r\n  },\r\n  _homeBtnView: {\r\n    marginHorizontal: 30,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    position: 'absolute',\r\n    bottom: -200,\r\n    right: 10,\r\n  },\r\n  _homeBtn: {\r\n    padding: 10,\r\n    borderRadius: 100,\r\n    backgroundColor: 'darkblue',\r\n  },\r\n\r\n  inv_container: {\r\n    flex: 1,\r\n    marginBottom: 12,\r\n    borderBottomWidth: 0.5,\r\n    borderBottomColor: '#dadada',\r\n  },\r\n  inv_content: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: 2,\r\n    marginBottom: 8,\r\n  },\r\n  inv_data: {\r\n    color: '#dadada',\r\n    fontWeight: 'bold',\r\n  },\r\n  inv_label: {\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  inv_value: {\r\n    fontSize: 15,\r\n    color: '#2ecc71',\r\n    fontWeight: 'bold',\r\n  },\r\n  inv_expenses: {\r\n    fontSize: 15,\r\n    color: '#e74c3c',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/Profile.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "Perfil",
    "memberof": "src/screens/Profile.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/Profile.jsx~Perfil",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/Profile.jsx",
    "importStyle": "Perfil",
    "description": "Profile screen component",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Perfil"
      },
      {
        "tagName": "@returns",
        "tagValue": "{JSX.Element} Profile screen component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Navigation object for navigating between screens"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSX.Element"
      ],
      "spread": false,
      "description": "Profile screen component"
    }
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/Profile.jsx",
    "static": true,
    "longname": "src/screens/Profile.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/Profile.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/screens/Settings.jsx",
    "content": "/**\r\n * Settings screen component.\r\n * \r\n * @param {object} navigation - The navigation object used for navigating between screens.\r\n * @returns {JSX.Element} The rendered Settings screen.\r\n */\r\nimport { useEffect, useState } from 'react';\r\nimport ChangeData from '../components/ChangeData';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport { View, TouchableOpacity, StyleSheet, Text, StatusBar } from 'react-native';\r\nimport DBStorage from '../database/firebaseDBMethods';\r\nimport { useLoading } from '../Context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64\r\n\r\n\r\nexport default function Settings({ navigation }) {\r\n  const { showLoading, hideLoading, setShouldRefresh } = useLoading();\r\n\r\n\r\n  const [dados, setUserData] = useState({});\r\n  const [shouldRefresh, setShouldRefreshSettings] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getAllData = async () => {\r\n\r\n      const doc = await AsyncStorage.getItem('userDoc');\r\n      const fr = new DBStorage(doc);\r\n      try {\r\n        showLoading();\r\n        let res = await fr.getFullDoc();\r\n        let uD = res.userData;\r\n        setUserData(uD);\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        hideLoading();\r\n      }\r\n\r\n    };\r\n\r\n    getAllData();\r\n  }, [shouldRefresh]);\r\n\r\n  const refresh = async () => {\r\n    setShouldRefreshSettings(!shouldRefresh);\r\n  }\r\n\r\n  const handleSair = async () => {\r\n    await AsyncStorage.removeItem('isAuth');\r\n    await AsyncStorage.removeItem('fullUserData');\r\n    await AsyncStorage.removeItem('userDoc');\r\n    navigation.navigate(\"Auth\");\r\n  }\r\n\r\n  return (\r\n    <View style={{ marginTop: statusBarHeight, height: '100%' }}>\r\n      <View>\r\n        <ChangeData\r\n          label=\"Nome\"\r\n          value={dados.name}\r\n          refresh={refresh}\r\n        />\r\n        <ChangeData\r\n          label=\"Email\"\r\n          value={dados.email}\r\n          refresh={refresh}\r\n        />\r\n        <ChangeData\r\n          label=\"Profissão\"\r\n          value={dados.profissao}\r\n          refresh={refresh}\r\n        />\r\n        <ChangeData\r\n          label=\"Perfil de Investimento\"\r\n          value={dados.perfilInvestimento}\r\n          refresh={refresh}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.homeBtnView}>\r\n        <TouchableOpacity\r\n          style={styles.homeBtn}\r\n          onPress={() => {\r\n            setShouldRefresh(true);\r\n            navigation.navigate('Home');\r\n          }}>\r\n          <MaterialIcons name=\"home\" size={30} color=\"#fff\" />\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <TouchableOpacity style={styles.sair} onPress={handleSair}>\r\n        <Text style={{ fontSize: 20 }}>Sair</Text></TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  homeBtnView: {\r\n    marginHorizontal: 30,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    position: 'absolute',\r\n    bottom: 80,\r\n    right: 10,\r\n  },\r\n  homeBtn: {\r\n    padding: 10,\r\n    borderRadius: 100,\r\n    backgroundColor: 'darkblue',\r\n  },\r\n  sair: {\r\n    position: 'absolute',\r\n    bottom: 80,\r\n    left: 20,\r\n    borderWidth: 1,\r\n    borderColor: 'darkblue',\r\n    borderRadius: 12,\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16\r\n  }\r\n\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/Settings.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/Settings.jsx",
    "static": true,
    "longname": "src/screens/Settings.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/Settings.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "Settings",
    "memberof": "src/screens/Settings.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/Settings.jsx~Settings",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/Settings.jsx",
    "importStyle": "Settings",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/Settings.jsx",
    "static": true,
    "longname": "src/screens/Settings.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/Settings.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/screens/subscreens/ChangeProfilePic.jsx",
    "content": "import React, { useRef, useState } from 'react';\r\nimport { Camera, CameraType } from 'expo-camera';\r\nimport { View, Text, TouchableOpacity, StatusBar, StyleSheet } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64\r\n\r\nexport default function ChangeProfilePic({ navigation }) {\r\n\r\n    const [type, setType] = useState(CameraType.back);\r\n    const [permission, requestPermission] = Camera.useCameraPermissions();\r\n\r\n    const [display, setDisplay] = useState(false);\r\n    const [changeIcon, setChangeIcon] = useState(\"camera\");\r\n    const [takenPhoto, setTakenPhoto] = useState({});\r\n\r\n    const camera = useRef(Camera);\r\n\r\n    if (!permission) {\r\n        return (<View><Text>Permission to use camera was not granted!</Text></View>);\r\n    }\r\n\r\n    if (!permission.granted) {\r\n        return (\r\n            <View style={st.view}>\r\n                <Text style={st.title}>\r\n                    Autoriza a utilizacao da camera?\r\n                </Text>\r\n                <View>\r\n                    <TouchableOpacity style={st.btn} onPress={requestPermission}>\r\n                        <Text style={st.btnTxt}>Sim</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={st.btn} onPress={() => { navigation.navigate(\"Profile\") }}>\r\n                        <Text style={st.btnTxt}>Não</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n\r\n    const flipCamera = () => {\r\n        setType(type === CameraType.back ? CameraType.front : CameraType.back);\r\n    }\r\n\r\n\r\n    const handleAttachPhoto = async () => {\r\n        if (changeIcon === \"camera\") {\r\n            const photo = await camera.current.takePictureAsync();\r\n            setTakenPhoto(photo);\r\n            camera.current.pausePreview();\r\n            setDisplay(true);\r\n            setChangeIcon(\"save\");\r\n        } else {\r\n            resetPic();\r\n            navigation.navigate(\"UploadPic\", { photoData: takenPhoto });\r\n        }\r\n    };\r\n\r\n\r\n    const resetPic = () => {\r\n        setDisplay(false);\r\n        setChangeIcon(\"camera\");\r\n        camera.current.resumePreview();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <View style={{ flex: 1, marginTop: statusBarHeight }}>\r\n            <View style={{ width: '100%', height: '5%', backgroundColor: 'darkblue'}}></View>\r\n            <Camera style={{ width: '100%', height: '90%'}} type={type} ref={camera} focusable={true} >\r\n                <View style={[st.return, { display: display ? \"none\" : \"flex\" }]}>\r\n                    <TouchableOpacity onPress={() => { navigation.navigate(\"TypeOfPic\"); }}>\r\n                        <Ionicons name=\"arrow-back\" size={30} color=\"#969696\" />\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={[st.tryAgain, { display: display ? \"flex\" : \"none\" }]}>\r\n                    <TouchableOpacity onPress={() => { resetPic }}>\r\n                        <Text style={st.tryAgainTxt}>Nova foto</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={st.cameraBtns}>\r\n                    <TouchableOpacity style={{ display: display ? \"none\" : \"flex\" }} onPress={flipCamera}>\r\n                        <Ionicons name=\"camera-reverse-outline\" size={35} color=\"#969696\" />\r\n                    </TouchableOpacity>\r\n\r\n                    <TouchableOpacity onPress={handleAttachPhoto}>\r\n                        <Ionicons name={changeIcon} size={35} color=\"#969696\" />\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </Camera>\r\n            <View style={{ width: '100%', height: '5%', backgroundColor: 'darkblue'}}></View>\r\n        </View>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst st = StyleSheet.create({\r\n    view: {\r\n        marginTop: statusBarHeight,\r\n        flex: 1,\r\n        paddingHorizontal: 20,\r\n        backgroundColor: \"#000000da\",\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        paddingVertical: 10,\r\n        marginTop: 15,\r\n        color: \"#969696\",\r\n        textAlign: 'center',\r\n    },\r\n    btn: {\r\n        backgroundColor: '#969696',\r\n        alignItems: 'center',\r\n        width: 160,\r\n        borderRadius: 5,\r\n        paddingVertical: 10,\r\n    },\r\n    btnTxt: {\r\n        fontSize: 15,\r\n    },\r\n    cameraBtns: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        position: 'absolute',\r\n        bottom: 30,\r\n        width: '100%',\r\n        paddingHorizontal: 20,\r\n    },\r\n    return: {\r\n        position: 'absolute',\r\n        top: 20,\r\n        left: 15,\r\n    },\r\n    tryAgain: {\r\n        position: 'absolute',\r\n        top: 20,\r\n        right: 20,\r\n        backgroundColor: '#969696',\r\n    },\r\n    tryAgainTxt: {\r\n        fontSize: 18,\r\n    }\r\n});",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/ChangeProfilePic.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/ChangeProfilePic.jsx",
    "static": true,
    "longname": "src/screens/subscreens/ChangeProfilePic.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/ChangeProfilePic.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "ChangeProfilePic",
    "memberof": "src/screens/subscreens/ChangeProfilePic.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/ChangeProfilePic.jsx~ChangeProfilePic",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/ChangeProfilePic.jsx",
    "importStyle": "ChangeProfilePic",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "st",
    "memberof": "src/screens/subscreens/ChangeProfilePic.jsx",
    "static": true,
    "longname": "src/screens/subscreens/ChangeProfilePic.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/ChangeProfilePic.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/screens/subscreens/InvestmentsCheckbox.jsx",
    "content": "import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, TouchableOpacity, StyleSheet, StatusBar } from 'react-native';\r\nimport ArrowBack from '../../components/ArrowBack';\r\nimport { useLoading } from '../../Context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport DBStorage from '../../database/firebaseDBMethods';\r\nimport { Feather } from '@expo/vector-icons';\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64;\r\n\r\nexport default function InvestmentsCheckbox({ route, navigation }) {\r\n    const { showLoading, hideLoading } = useLoading();\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isRef, setRef] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (route.params) {\r\n            setItems(route.params.invs);\r\n        }\r\n        const update = async () => {\r\n            try {\r\n                const doc = await AsyncStorage.getItem('userDoc');\r\n                const fr = new DBStorage(doc)\r\n                let exists = await fr.getFullDoc();\r\n                let alreadInv = exists.investments;\r\n                setItems(alreadInv);\r\n            } catch (e) { console.log(e) }\r\n        };\r\n        update();\r\n        setRef(false);\r\n    }, [isRef])\r\n\r\n    const toggleInterest = (index) => {\r\n        const updatedItems = [...items];\r\n        updatedItems[index].interest = !updatedItems[index].interest;\r\n        setItems(updatedItems);\r\n    };\r\n\r\n\r\n    const saveData = async () => {\r\n        try {\r\n            showLoading();\r\n\r\n            const doc = await AsyncStorage.getItem('userDoc');\r\n            const fr = new DBStorage(doc);\r\n            var res = await fr.updateDoc({\r\n                investments: items\r\n            });\r\n            if (res !== true) {\r\n                console.log(res)\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        } finally {\r\n            if (route.params) {\r\n                route.params.refreshProfile();\r\n            }\r\n            hideLoading();\r\n            navigation.navigate(\"Profile\");\r\n        }\r\n    };\r\n\r\n    const renderCheckboxItem = ({ item, index }) => (\r\n        <View style={styles.checkboxItem}>\r\n            <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }} onPress={() => toggleInterest(index)}>\r\n                <Text style={styles.labelTxt}>{item.label}</Text>\r\n                <View style={{ marginLeft: 10 }}>\r\n                    {item.interest ?\r\n                        <Feather name=\"check-square\" size={24} color=\"darkblue\" /> :\r\n                        <Feather name=\"square\" size={24} color=\"darkblue\" />\r\n                    }\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n\r\n    return (\r\n        <View style={{ marginTop: statusBarHeight, paddingHorizontal: 15, height: '100%' }}>\r\n            <ArrowBack navigation={navigation} navigate=\"Profile\" style={{ marginTop: 10 }} />\r\n            <View style={styles.container}>\r\n                <Text style={styles.header}>Selecione as ações de interesse:</Text>\r\n                <FlatList\r\n                    data={items}\r\n                    renderItem={renderCheckboxItem}\r\n                    keyExtractor={(item) => item.label}\r\n                />\r\n            </View>\r\n            <View style={styles.btn_container}>\r\n                <View style={styles.btn_buttonContainer}>\r\n                    <TouchableOpacity style={styles.btn_button} onPress={saveData}>\r\n                        <Text style={styles.btn_buttonText}>Salvar</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity\r\n                        style={styles.btn_button}\r\n                        onPress={() => {\r\n                            navigation.navigate('SaveInvestments', { isRefresh: () => { setRef(true); } });\r\n                        }}>\r\n                        <Text style={styles.btn_buttonText}>Novo</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    checkboxItem: {\r\n        marginVertical: 12,\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 4,\r\n        borderWidth: .4,\r\n        borderRadius: 5,\r\n        borderColor: '#00008b6c'\r\n    },\r\n    labelTxt: {\r\n        fontSize: 18,\r\n        padding: 2\r\n    },\r\n\r\n    container: {\r\n        padding: 16,\r\n        justifyContent: 'center',\r\n        marginTop: statusBarHeight + 8,\r\n    },\r\n    header: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginBottom: 16,\r\n    },\r\n    optionContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginBottom: 8,\r\n    },\r\n\r\n    btn_container: {\r\n        flex: 1,\r\n        marginTop: 30,\r\n    },\r\n    btn_buttonContainer: {\r\n        flexDirection: 'row',\r\n\r\n        paddingHorizontal: 16,\r\n    },\r\n    btn_button: {\r\n        backgroundColor: 'darkblue',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        flex: 1,\r\n        marginHorizontal: 8,\r\n    },\r\n    btn_buttonText: {\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n    },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/InvestmentsCheckbox.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/InvestmentsCheckbox.jsx",
    "static": true,
    "longname": "src/screens/subscreens/InvestmentsCheckbox.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/InvestmentsCheckbox.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "InvestmentsCheckbox",
    "memberof": "src/screens/subscreens/InvestmentsCheckbox.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/InvestmentsCheckbox.jsx~InvestmentsCheckbox",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/InvestmentsCheckbox.jsx",
    "importStyle": "InvestmentsCheckbox",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"route\": *, \"navigation\": *}"
        ],
        "defaultRaw": {
          "route": null,
          "navigation": null
        },
        "defaultValue": "{\"route\":null,\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/subscreens/InvestmentsCheckbox.jsx",
    "static": true,
    "longname": "src/screens/subscreens/InvestmentsCheckbox.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/InvestmentsCheckbox.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/screens/subscreens/resources/Graphs.jsx",
    "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Dimensions, View, StyleSheet, Text, ScrollView, TouchableOpacity, StatusBar } from \"react-native\";\r\nimport { PieChart, BarChart, LineChart } from \"react-native-chart-kit\";\r\nimport FlashMessage, { showMessage } from \"react-native-flash-message\";\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport { useLoading } from \"../../../Context\";\r\n\r\n\r\nconst screenWidth = Dimensions.get(\"window\").width;\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64;\r\n\r\n\r\nexport default function Graphs({ route, navigation }) {\r\n\r\n    const { showLoading, hideLoading } = useLoading();\r\n\r\n    const [moneyFlow, setMoneyFlow] = useState([]);\r\n    const [incomeData, setIncomeData] = useState(null);\r\n    const [expensesData, setExpensesData] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        showLoading();\r\n        let dt = route.params.allData;\r\n\r\n        //money flow\r\n        let newFlow = [];\r\n        if (dt.moneyFlow) {\r\n            dt.moneyFlow.forEach(element => {\r\n                newFlow.push({\r\n                    name: element.name === \"expenses\" ? \"Gastos\" : \"Receitas\",\r\n                    value: parseFloat(element.value),\r\n                    color: element.name === \"expenses\" ? '#990000' : \"#008060\"\r\n                })\r\n            });\r\n        }\r\n        setMoneyFlow(newFlow);\r\n\r\n        //income\r\n        let incomes1 = dt.incomes;\r\n        let newIncomes = {\r\n            labels: [],\r\n            datasets: [\r\n                {\r\n                    data: []\r\n                }\r\n            ]\r\n        };\r\n        if (incomes1) {\r\n            incomes1.forEach(element => {\r\n                newIncomes.labels.push(element.description);\r\n                newIncomes.datasets[0].data.push(parseFloat(element.value));\r\n            });\r\n            setIncomeData(newIncomes);\r\n        }\r\n\r\n        //expenses\r\n        let expenses1 = dt.expenses;\r\n        let newExpenses = {\r\n            labels: [],\r\n            datasets: [\r\n                {\r\n                    data: []\r\n                }\r\n            ]\r\n        };\r\n        if (expenses1) {\r\n            expenses1.forEach(element => {\r\n                newExpenses.labels.push(element.description);\r\n                newExpenses.datasets[0].data.push(parseFloat(element.value));\r\n            });\r\n            setExpensesData(newExpenses);\r\n        }\r\n\r\n        hideLoading();\r\n    }, [])\r\n\r\n\r\n    const chartConfig = {\r\n        backgroundGradientFrom: \"#fff\",\r\n        backgroundGradientFromOpacity: 0,\r\n        backgroundGradientTo: \"#fff\",\r\n        backgroundGradientToOpacity: 0,\r\n        strokeWidth: 1,\r\n        barPercentage: 0.5,\r\n    };\r\n\r\n    const lineChartConfig = {\r\n        ...chartConfig,\r\n        color: (opacity = 1) => `rgba(139, 16, 0, ${opacity})`\r\n    }\r\n\r\n    const barChartConfig = {\r\n        ...chartConfig,\r\n        color: (opacity = 1) => `rgba(0, 139, 93, ${opacity})`\r\n    };\r\n\r\n\r\n    return (\r\n        <View style={{ marginTop: statusBarHeight, height: '100%' }}>\r\n            <TouchableOpacity style={styles.back} onPress={() => { navigation.navigate(\"Home\") }}>\r\n                <Ionicons name=\"home\" size={18} color=\"darkblue\" />\r\n            </TouchableOpacity>\r\n            <Text style={[styles.title, { marginTop: 8, paddingHorizontal: 8 }]}>Minhas Finanças</Text>\r\n\r\n            <ScrollView style={{ marginBottom: statusBarHeight + 20 }}>\r\n\r\n                <View style={styles.graphGroup}>\r\n                    <Text style={styles.graphTitle}>Gastos X Receitas</Text>\r\n                    {moneyFlow ?\r\n                        <PieChart\r\n                            data={moneyFlow}\r\n                            width={screenWidth - 20}\r\n                            height={220}\r\n                            chartConfig={{\r\n                                ...chartConfig,\r\n                                color: () => `rgba(0, 0, 139, 1)`\r\n                            }}\r\n                            accessor={\"value\"}\r\n                            backgroundColor={\"transparent\"}\r\n                        />\r\n                        : <Text style={{ margin: 20 }}>Sem dados</Text>\r\n                    }\r\n                </View>\r\n\r\n                <View style={styles.graphGroup}>\r\n                    <Text style={styles.graphTitle}>Receitas</Text>\r\n                    {incomeData ?\r\n                        <BarChart\r\n                            width={screenWidth}\r\n                            height={300}\r\n                            data={incomeData}\r\n                            yAxisLabel=\"R$\"\r\n                            yLabelsOffset={0}\r\n                            chartConfig={barChartConfig}\r\n                            fromZero={true}\r\n                        />\r\n                        : <Text style={{ margin: 20 }}>Sem dados</Text>\r\n                    }\r\n                </View>\r\n\r\n                <View style={styles.graphGroup}>\r\n                    <Text style={styles.graphTitle}>Gastos</Text>\r\n                    <FlashMessage duration={5000} />\r\n                    {expensesData ?\r\n                        <LineChart\r\n                            bezier\r\n                            width={screenWidth - 20}\r\n                            height={300}\r\n                            data={expensesData}\r\n                            yAxisLabel=\"R$\"\r\n                            yAxisSuffix=\"\"\r\n                            verticalLabelRotation={20}\r\n                            chartConfig={lineChartConfig}\r\n                            fromZero={true}\r\n                            onDataPointClick={({ value, index, getColor }) => {\r\n                                showMessage({\r\n                                    message: `R$ ${value}`,\r\n                                    description: `${expensesData.labels[index]}`,\r\n                                    backgroundColor: getColor(.5)\r\n                                })\r\n                            }\r\n                            }\r\n                        />\r\n                        : <Text style={{ margin: 20 }}>Sem dados</Text>\r\n                    }\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    graphTitle: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginBottom: 16,\r\n        textAlign: 'center'\r\n    },\r\n    graph: {\r\n        fontSize: 16,\r\n        textAlign: 'center'\r\n    },\r\n    graphGroup: {\r\n        borderWidth: 1,\r\n        borderColor: 'rgba(0, 0, 139,.2)',\r\n        margin: 10,\r\n        padding: 5\r\n    },\r\n    back: {\r\n        marginHorizontal: 10,\r\n        marginVertical: 8,\r\n        position: 'absolute',\r\n        top: 6,\r\n        zIndex: 99,\r\n        borderRadius: 100,\r\n        borderWidth: 2,\r\n        padding: 5,\r\n        borderColor: 'darkblue'\r\n    },\r\n    title: {\r\n        fontSize: 28,\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\"\r\n    },\r\n})",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/resources/Graphs.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/subscreens/resources/Graphs.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Graphs.jsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Graphs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/resources/Graphs.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Graphs.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Graphs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "Graphs",
    "memberof": "src/screens/subscreens/resources/Graphs.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/resources/Graphs.jsx~Graphs",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/resources/Graphs.jsx",
    "importStyle": "Graphs",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"route\": *, \"navigation\": *}"
        ],
        "defaultRaw": {
          "route": null,
          "navigation": null
        },
        "defaultValue": "{\"route\":null,\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/subscreens/resources/Graphs.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Graphs.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Graphs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/screens/subscreens/resources/MapLoadingScreen.jsx",
    "content": "import React, { useEffect, useState } from 'react';\r\nimport { View } from 'react-native';\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as Location from 'expo-location';\r\nimport EventsApi from '../../../server/events_api.js';\r\n\r\n\r\n\r\nexport default function MapLoadingScreen() {\r\n    const navigation = useNavigation();\r\n\r\n    const [currentLocation, setCurrentLocation] = useState();\r\n\r\n\r\n    async function setLocation() {\r\n        let location = await Location.getCurrentPositionAsync();\r\n        if (location) {\r\n            setCurrentLocation({\r\n                latitude: location.coords.latitude,\r\n                longitude: location.coords.longitude,\r\n                latitudeDelta: 0.0922,\r\n                longitudeDelta: 0.0421,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let { status } = await Location.requestForegroundPermissionsAsync();\r\n            if (status !== 'granted') {\r\n                console.error('Permissão de localização não concedida');\r\n                return;\r\n            }\r\n\r\n            await setLocation();\r\n            \r\n            const eventsApi = new EventsApi();\r\n            \r\n            const mycurrentplace = await eventsApi.getCityFromLocationName(currentLocation);\r\n\r\n            const eventsList = await eventsApi.getEventsData(mycurrentplace);\r\n            //{ \"Nome\": title, \"Local\": loc, \"Date\": finalDates, \"Link\": link }\r\n\r\n            let eventsListWithLocation = [];\r\n            for (let index = 0; index < eventsList.length; index++) {\r\n                const el = eventsList[index];\r\n                const locale = await eventsApi.getEventCoordinates(el.Local);\r\n                eventsListWithLocation.push({\r\n                    id: index,\r\n                    \"Nome do evento\": el.Nome,\r\n                    \"Local do evento\": el.Local,\r\n                    \"Local\": locale,\r\n                    \"Datas\": {\r\n                        \"Data de inicio do evento\": el[\"Date\"].split(\" - \")[0],\r\n                        \"Data final do evento\": el[\"Date\"].split(\" - \")[1]\r\n                    },\r\n                    Link: el[\"Link\"]\r\n                });\r\n            };\r\n            \r\n            await new Promise(resolve => setTimeout(resolve, 5400));\r\n\r\n            navigation.navigate('EventsMap', \r\n                { eventsListWithLocation: eventsListWithLocation, currentLocation: currentLocation });\r\n\r\n        };\r\n\r\n        fetchData();\r\n    })\r\n\r\n    return (\r\n        <View style={{ justifyContent: 'center', alignContent: 'center', height: '100%' }}>\r\n            <AntDesign name=\"loading1\" size={24} color=\"black\" />\r\n        </View>\r\n    )\r\n}",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/resources/MapLoadingScreen.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "MapLoadingScreen",
    "memberof": "src/screens/subscreens/resources/MapLoadingScreen.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/resources/MapLoadingScreen.jsx~MapLoadingScreen",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/resources/MapLoadingScreen.jsx",
    "importStyle": "MapLoadingScreen",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/screens/subscreens/resources/Money.jsx",
    "content": "import { useEffect, useState } from \"react\"\r\nimport { useLoading } from \"../../../Context\";\r\nimport ApiRequests from \"../../../server/apidata\";\r\nimport { StyleSheet, Text, ScrollView, TouchableOpacity, View, StatusBar } from \"react-native\";\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport MoneysGraph from \"../../../components/MoneysGraph\";\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64\r\n\r\n\r\nconst api = new ApiRequests();\r\n\r\nexport default function Money({ navigation }) {\r\n\r\n    const { showLoading, hideLoading } = useLoading();\r\n    const [pesoName, setPesoName] = useState(\"\");\r\n    const [dolarName, setDolarName] = useState(\"\");\r\n    const [euroName, setEuroName] = useState(\"\");\r\n\r\n    const moedas = [\"ARS-BRL\", \"EUR-BRL\", \"USD-BRL\"];\r\n    const [dolar, setDolar] = useState(null);\r\n    const [euro, setEuro] = useState(null);\r\n    const [peso, setPeso] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const getMoney = async () => {\r\n            showLoading();\r\n            try {\r\n                var outp = await api.getMoneyData(moedas);\r\n\r\n                let arg = outp[moedas[0].replace(\"-\", \"\")];\r\n                let eur = outp[moedas[1].replace(\"-\", \"\")];\r\n                let us = outp[moedas[2].replace(\"-\", \"\")];\r\n\r\n                setDolarName(us[\"name\"]);\r\n                setPesoName(arg[\"name\"]);\r\n                setEuroName(eur[\"name\"]);\r\n\r\n                let meuro = {\r\n                    labels: [eur[\"code\"], eur[\"codein\"]],\r\n                    datasets: [\r\n                        {\r\n                            data: [parseFloat(eur[\"ask\"]), parseFloat(1)]\r\n                        }\r\n                    ]\r\n                };\r\n                setEuro(meuro);\r\n\r\n                let mpeso = {\r\n                    labels: [arg[\"code\"], arg[\"codein\"]],\r\n                    datasets: [\r\n                        {\r\n                            data: [parseFloat(arg[\"ask\"]), parseFloat(1)]\r\n                        }\r\n                    ]\r\n                };\r\n                setPeso(mpeso);\r\n\r\n                let mdolar = {\r\n                    labels: [us[\"code\"], us[\"codein\"]],\r\n                    datasets: [\r\n                        {\r\n                            data: [parseFloat(us[\"ask\"]), parseFloat(1)]\r\n                        }\r\n                    ]\r\n                };\r\n                setDolar(mdolar);\r\n\r\n            }\r\n            catch (e) { console.log(e) } finally {\r\n                hideLoading();\r\n            }\r\n        }\r\n\r\n        getMoney();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <View style={{ marginTop: statusBarHeight }}>\r\n            <TouchableOpacity style={styles.back} onPress={() => { navigation.navigate(\"Home\") }}>\r\n                <Ionicons name=\"home\" size={18} color=\"darkblue\" />\r\n            </TouchableOpacity>\r\n            <ScrollView style={{ marginTop: 16, paddingHorizontal: 8 }}>\r\n\r\n                <Text style={styles.title}>Cotações</Text>\r\n\r\n                {peso ? <MoneysGraph color={\"rgb(0, 139, 93)\"} bardata={peso} name={pesoName} />\r\n                    : <View style={styles.load}></View>}\r\n\r\n                {dolar ? <MoneysGraph color={\"rgb(163, 39, 23)\"} bardata={dolar} name={dolarName} />\r\n                    : <View style={styles.load}></View>}\r\n\r\n                {euro ? <MoneysGraph color={\"rgb(163, 39, 23)\"} bardata={euro} name={euroName} />\r\n                    : <View style={styles.load}></View>}\r\n\r\n            </ScrollView >\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    back: {\r\n        marginHorizontal: 10,\r\n        marginVertical: 8,\r\n        position: 'absolute',\r\n        top: 6,\r\n        zIndex: 99,\r\n        borderRadius: 100,\r\n        borderWidth: 2,\r\n        padding: 5,\r\n        borderColor: 'darkblue'\r\n    },\r\n    title: {\r\n        fontSize: 28,\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\"\r\n    },\r\n    load: {\r\n        padding: 12,\r\n        marginBottom: 24,\r\n        marginLeft: 12\r\n    }\r\n})",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/resources/Money.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/resources/Money.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Money.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Money.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "api",
    "memberof": "src/screens/subscreens/resources/Money.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Money.jsx~api",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Money.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "src/server/apidata.js~ApiRequests"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "Money",
    "memberof": "src/screens/subscreens/resources/Money.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/resources/Money.jsx~Money",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/resources/Money.jsx",
    "importStyle": "Money",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/subscreens/resources/Money.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/Money.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/Money.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/screens/subscreens/resources/SeePicture.jsx",
    "content": "import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { StyleSheet, View, Image, TouchableOpacity, Dimensions, Text } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst screenWidth = Dimensions.get('window').width;\r\nconst screenHeight = Dimensions.get('window').height;\r\n\r\nexport default function SeePicture({ navigation, route }) {\r\n    const [tempoNula, setTempoNula] = useState(0);\r\n    const [msg, setMsg] = useState('Carregando...');\r\n\r\n    const [photo, setPhoto] = useState(null);\r\n    useEffect(() => {\r\n        const loadPic = async () => {\r\n            const profPic = await AsyncStorage.getItem('profilePic');\r\n            if (profPic) {\r\n                setPhoto(profPic);\r\n            };\r\n        };\r\n        loadPic();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let timer;\r\n        if (!photo) {\r\n            timer = setTimeout(() => {\r\n                setTempoNula(tempoNula + 1);\r\n            }, 1000); \r\n        } else {\r\n            setTempoNula(0); \r\n        }\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [photo, tempoNula]);\r\n\r\n    useEffect(() => {\r\n        if (tempoNula >= 8) {\r\n            setMsg(\"A imagem não foi encontrada!\");\r\n            setTempoNula(0);\r\n        }\r\n    }, [tempoNula]);\r\n\r\n\r\n    return (\r\n        <View style={styles.image}>\r\n            <View style={styles.return}>\r\n                <TouchableOpacity onPress={() => navigation.navigate(\"Profile\")}>\r\n                    <FontAwesome name=\"close\" size={30} color=\"darkblue\" />\r\n                </TouchableOpacity>\r\n            </View>\r\n            <View>\r\n                {photo ?\r\n                    <Image source={{ uri: photo }} style={{ width: 0.95 * screenWidth, height: 0.95 * screenHeight }} /> :\r\n                    <Text>{msg}</Text>}\r\n            </View>\r\n        </View>\r\n    );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    return: {\r\n        position: 'absolute',\r\n        top: 50,\r\n        left: 20,\r\n        zIndex: 10,\r\n        backgroundColor: 'rgba(255,255,255,0.5)'\r\n    },\r\n    image: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 20\r\n    }\r\n});",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/resources/SeePicture.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/subscreens/resources/SeePicture.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/SeePicture.jsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/SeePicture.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/subscreens/resources/SeePicture.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/SeePicture.jsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/SeePicture.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "SeePicture",
    "memberof": "src/screens/subscreens/resources/SeePicture.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/resources/SeePicture.jsx~SeePicture",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/resources/SeePicture.jsx",
    "importStyle": "SeePicture",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *, \"route\": *}"
        ],
        "defaultRaw": {
          "navigation": null,
          "route": null
        },
        "defaultValue": "{\"navigation\":null,\"route\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/subscreens/resources/SeePicture.jsx",
    "static": true,
    "longname": "src/screens/subscreens/resources/SeePicture.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/resources/SeePicture.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/screens/subscreens/SaveInvestment.jsx",
    "content": "import { View, Text, TextInput, Button, StyleSheet, TouchableOpacity, StatusBar } from 'react-native';\r\nimport React, { useState } from 'react';\r\nimport DBStorage from '../../database/firebaseDBMethods';\r\nimport { AntDesign, Ionicons } from '@expo/vector-icons';\r\nimport { useLoading } from './../../Context';\r\nimport ArrowBack from '../../components/ArrowBack';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight + 5 : 64;\r\n\r\n\r\nexport default function SaveInvestments({ navigation, route }) {\r\n  const { showLoading, hideLoading, setShouldRefresh } = useLoading();\r\n\r\n  const [description, setDescription] = useState('');\r\n  const [value, setValue] = useState('');\r\n  const [opcao, setOpcao] = useState(null);\r\n  const [msg, setMsg] = useState('');\r\n\r\n  const handleCheck1 = () => {\r\n    setOpcao(0);\r\n  };\r\n\r\n  const handleCheck2 = () => {\r\n    setOpcao(1);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      showLoading();\r\n      if (description && value && (opcao == 1 || opcao == 0)) {\r\n        setMsg('');\r\n\r\n        const doc = await AsyncStorage.getItem('userDoc');\r\n        const fr = new DBStorage(doc)\r\n        let exists = await fr.getFullDoc();\r\n        let alreadInv = exists.investments;\r\n        let shouldSave = true;\r\n        if (alreadInv) {\r\n          alreadInv.map((item, index) => {\r\n            if (description === item.label) {\r\n              shouldSave = false;\r\n            }\r\n          })\r\n        }\r\n        if (!shouldSave) {\r\n          setMsg(\"A ação já existe!\");\r\n        } else {\r\n          await fr.appendToInvestments({\r\n            label: description,\r\n            value: value,\r\n            status: opcao,\r\n            interest: true\r\n          });\r\n          setMsg('');\r\n          setShouldRefresh(true);\r\n\r\n          if(route.params){\r\n            route.params.isRefresh();\r\n          }\r\n          navigation.navigate(\"checkbox\");\r\n        }\r\n      } else {\r\n        setMsg(\"Todos os campos devem ser preenchidos!\");\r\n      }\r\n    }\r\n    catch (err) { console.log(err); } finally { hideLoading(); }\r\n  };\r\n\r\n\r\n  return (\r\n    <View style={{ marginTop: statusBarHeight + 15, paddingHorizontal: 15, height: '100%' }}>\r\n      <ArrowBack navigation={navigation} navigate={\"checkbox\"} />\r\n      <Text style={{ fontWeight: 'bold', fontSize: 20, marginTop: 50 }}>\r\n        Cadastrando nova Ação de Interesse\r\n      </Text>\r\n      <View style={styles.container}>\r\n        <Text style={styles.label}>Descrição:</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          onChangeText={(text) => {\r\n            setDescription(text);\r\n          }}\r\n          value={description}\r\n          placeholder=\"Título da ação\"\r\n        />\r\n\r\n        <Text style={styles.label}>Valor:</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          onChangeText={(text) => {\r\n            setValue(text);\r\n          }}\r\n          value={value}\r\n          placeholder=\"Quanto a ação está valendo hoje?\"\r\n          keyboardType=\"numeric\"\r\n        />\r\n\r\n        <Text style={styles.label}>Qual o status desta ação hoje?:</Text>\r\n        <View style={styles.radioContainer}>\r\n          <TouchableOpacity style={styles.radioButton} onPress={handleCheck1}>\r\n            <Text>\r\n              <AntDesign\r\n                name={opcao === 0 ? 'checkcircle' : 'checkcircleo'}\r\n                size={18}\r\n                color=\"darkblue\"\r\n              />\r\n              &nbsp;Crescimento\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity style={styles.radioButton} onPress={handleCheck2}>\r\n            <Text style={{ alignItems: 'center' }}>\r\n              <AntDesign\r\n                name={opcao === 1 ? 'checkcircle' : 'checkcircleo'}\r\n                size={18}\r\n                color=\"darkblue\"\r\n              />\r\n              &nbsp;Queda\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        <Button title=\"Enviar\" onPress={handleSubmit} color=\"darkblue\" />\r\n\r\n        <Text style={styles.msg}>{msg}</Text>\r\n      </View>\r\n\r\n      <View style={{ position: 'absolute', bottom: 0, right: 20 }}>\r\n        <TouchableOpacity onPress={() => { navigation.navigate(\"checkbox\") }}>\r\n          <Ionicons name=\"arrow-back-circle-sharp\" size={40} color=\"darkblue\" />\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  msg: {\r\n    color: '#7a0101',\r\n    marginVertical: 24,\r\n    fontSize: 18,\r\n    textAlign: 'center'\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  label: {\r\n    fontSize: 16,\r\n    color: 'darkblue',\r\n    marginBottom: 8,\r\n    marginTop: 3,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 16,\r\n    paddingHorizontal: 8,\r\n  },\r\n  radioContainer: {\r\n    flexDirection: 'row',\r\n    marginBottom: 16,\r\n    alignContent: 'center',\r\n    marginTop: 5,\r\n  },\r\n  radioButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginRight: 16,\r\n  },\r\n  back: {\r\n    marginHorizontal: 10,\r\n    position: 'absolute',\r\n    zIndex: 99\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/SaveInvestment.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/SaveInvestment.jsx",
    "static": true,
    "longname": "src/screens/subscreens/SaveInvestment.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/SaveInvestment.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "SaveInvestments",
    "memberof": "src/screens/subscreens/SaveInvestment.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/SaveInvestment.jsx~SaveInvestments",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/SaveInvestment.jsx",
    "importStyle": "SaveInvestments",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *, \"route\": *}"
        ],
        "defaultRaw": {
          "navigation": null,
          "route": null
        },
        "defaultValue": "{\"navigation\":null,\"route\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/subscreens/SaveInvestment.jsx",
    "static": true,
    "longname": "src/screens/subscreens/SaveInvestment.jsx~styles",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/SaveInvestment.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/screens/subscreens/SplashScreen.jsx",
    "content": "import React, { useEffect } from 'react';\r\nimport { View } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport DBStorage from '../../database/firebaseDBMethods';\r\nimport LogoImage from '../../components/LogoImage';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nexport default function SplashScreen() {\r\n    const navigation = useNavigation();\r\n\r\n    useEffect(() => {\r\n        \r\n        const fetchData = async () => {\r\n            const doc = await AsyncStorage.getItem('userDoc');\r\n            if (!doc) {\r\n                await AsyncStorage.removeItem('isAuth');\r\n                await AsyncStorage.removeItem('fullUserData');\r\n                navigation.navigate(\"Auth\");\r\n            } else {\r\n                const fr = new DBStorage(doc);\r\n                let dadosDoBanco = {};\r\n                try {\r\n                    let isauth = await AsyncStorage.getItem('fullUserData')\r\n                    if (isauth) {\r\n                        navigation.navigate('Home');\r\n                    } else {\r\n                        dadosDoBanco = await fr.getFullDoc();\r\n                        await AsyncStorage.setItem('fullUserData', JSON.stringify(dadosDoBanco));\r\n                        await new Promise(resolve => setTimeout(resolve, 5400));\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Erro ao buscar dados do banco:', error);\r\n                } finally {\r\n                    navigation.navigate('Home');\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <View style={{ justifyContent: 'center', alignContent: 'center', height: '100%' }}>\r\n            <LogoImage />\r\n        </View>\r\n    );\r\n};\r\n\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/SplashScreen.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "SplashScreen",
    "memberof": "src/screens/subscreens/SplashScreen.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/SplashScreen.jsx~SplashScreen",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/SplashScreen.jsx",
    "importStyle": "SplashScreen",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/screens/subscreens/TypeOfPic.jsx",
    "content": "import React, { useState } from 'react';\r\nimport { View, Text, StatusBar, TouchableOpacity, StyleSheet, Modal, Image } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport Storage from '../../database/firebaseStorageMethods';\r\nimport Toast from 'react-native-toast-message';\r\n\r\n\r\nconst statusBarHeight = StatusBar.currentHeight ? StatusBar.currentHeight : 64;\r\n\r\nexport default function TypeOfPic({ navigation }) {\r\n\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [image, setImage] = useState({uri:null});\r\n    const [displayProgress, setDisplayProgress] = useState(false);\r\n    const [displayMsg, setDisplayMsg] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"É necessário anexar uma foto para salvar!\");\r\n    const [blockBtns, setBlockBtns] = useState(false);\r\n\r\n    const selectGift = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            allowsMultipleSelection: false,\r\n            quality: 1,\r\n        });\r\n        console.log(\"result\", result)\r\n        if (!result.canceled) {\r\n            setImage({\r\n                uri: result.assets[0].uri,\r\n                width: result.assets[0].width,\r\n                height: result.assets[0].height\r\n            });\r\n            setModalVisible(false);\r\n        }\r\n    }\r\n\r\n    uploadProfilePic = async () => {\r\n        setBlockBtns(true);\r\n        setDisplayProgress(true);\r\n        const userId = await AsyncStorage.getItem('userDoc');\r\n        const extension = (image.uri.split('.'))[(image.uri.split('.')).length - 1];\r\n        const photoDt = {\r\n            name: userId + '.' + extension,\r\n            contentType: 'image/' + extension,\r\n            contentLanguage: 'pt-Br',\r\n            type: \"Image\",\r\n            cacheControl: null,\r\n            contentLanguage: \"pt-Br\",\r\n            customMetadata: {\r\n                height: image.height,\r\n                width: image.width,\r\n            }\r\n        };\r\n        try {\r\n            const storage = new Storage(\"profile\");\r\n            const uploadResp = await storage.uploadFile(image.uri, photoDt.name, photoDt);\r\n            const downloadUrl = await storage.downloadFileUrl(photoDt.name);\r\n            await AsyncStorage.setItem('profilePic', downloadUrl);\r\n            Toast.show({ type: 'success', text1: 'Sucesso', text2: 'A imagem foi carregada com sucesso!' });\r\n            navigation.navigate(\"Profile\");\r\n        } catch (error) {\r\n            console.log(error.message)\r\n            Toast.show({ type: 'error', text1: 'Houve uma falha no upload', text2: error.message });\r\n            setErrorMsg(error.message);\r\n            setDisplayMsg(true);\r\n        } finally {\r\n            setDisplayProgress(false);\r\n            setBlockBtns(false);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={{ marginTop: statusBarHeight, flex:1 }}>\r\n            <View style={{ height: 20, backgroundColor: 'darkblue', paddingVertical: 10 }}></View>\r\n            <Text style={st.title}>Selecione como quer inserir uma nova foto:</Text>\r\n            <View style={st.btnsView}>\r\n                <TouchableOpacity disabled={blockBtns} style={st.btn} onPress={() => navigation.navigate('ChangeProfilePic')}>\r\n                    <Text style={st.btnTxt}>Camera</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity disabled={blockBtns} style={st.btn} onPress={() => setModalVisible(true)}>\r\n                    <Text style={st.btnTxt}>Galeria</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            <Modal animationType=\"slide\"\r\n                transparent={true} visible={modalVisible}\r\n                onRequestClose={() => {\r\n                    setModalVisible(!modalVisible);\r\n                }}>\r\n                <View style={st.modalContainer}>\r\n                    <View style={st.innerContainer}>\r\n                        <TouchableOpacity style={st.btn} onPress={selectGift}>\r\n                            <Text style={st.btnTxt}>Escolher da galeria</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={[st.btn, { backgroundColor: '#c95e5e' }]}\r\n                            onPress={() => setModalVisible(false)}>\r\n                            <Text style={st.btnTxt}>Cancelar</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            {image.uri && <View style={{ marginTop: 20, justifyContent: 'center', alignItems: 'center' }}>\r\n                <Image source={{ uri: image.uri }} style={{ width: image.width/3, height: image.height/3 }} />\r\n                <TouchableOpacity disabled={blockBtns} style={[st.btn, { marginTop: 20 }]} onPress={uploadProfilePic}>\r\n                    <Text style={st.btnTxt}>Usar essa foto</Text>\r\n                </TouchableOpacity>\r\n            </View>}\r\n            <View>\r\n                <Text style={[st.msg, { display: displayMsg ? \"flex\" : \"none\" }]}>{errorMsg}</Text>\r\n            </View>\r\n            {displayProgress ? <Text style={{ justifyContent: 'center', fontSize: 20 }}>Enviando...</Text> : null}\r\n            <TouchableOpacity onPress={() => navigation.navigate(\"Profile\")} \r\n                style={{ flex:1,position: 'absolute', bottom: 30, right: 20 }}>\r\n                <Text style={{fontSize: 18, color: 'darkblue'}}>Voltar</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst st = StyleSheet.create({\r\n    title: {\r\n        fontSize: 24,\r\n        marginTop: 20,\r\n        marginHorizontal: 15\r\n    },\r\n    btnsView: {\r\n        paddingVertical: 10,\r\n        paddingHorizontal: 15,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n    },\r\n    btn: {\r\n        backgroundColor: 'darkblue',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 8\r\n    },\r\n    btnTxt: {\r\n        fontSize: 18,\r\n        color: 'lightgrey'\r\n    },\r\n    modalContainer: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)', // Transparência\r\n    },\r\n    innerContainer: {\r\n        gap: 10\r\n    },\r\n    realBtn: {\r\n        margin: 5,\r\n        padding: 10\r\n    }\r\n});",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/TypeOfPic.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "statusBarHeight",
    "memberof": "src/screens/subscreens/TypeOfPic.jsx",
    "static": true,
    "longname": "src/screens/subscreens/TypeOfPic.jsx~statusBarHeight",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/TypeOfPic.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "TypeOfPic",
    "memberof": "src/screens/subscreens/TypeOfPic.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/TypeOfPic.jsx~TypeOfPic",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/TypeOfPic.jsx",
    "importStyle": "TypeOfPic",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "st",
    "memberof": "src/screens/subscreens/TypeOfPic.jsx",
    "static": true,
    "longname": "src/screens/subscreens/TypeOfPic.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/TypeOfPic.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/screens/subscreens/UploadPic.jsx",
    "content": "import React, { useState } from \"react\"\r\nimport { View, Image, TouchableOpacity, StyleSheet, Text } from \"react-native\"\r\nimport Storage from \"../../database/firebaseStorageMethods\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport Toast from 'react-native-toast-message';\r\n\r\n\r\nexport default function UploadPic({ navigation, route }) {\r\n    const [displayProgress, setDisplayProgress] = useState(false);\r\n    const [displayMsg, setDisplayMsg] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"É necessário anexar uma foto para salvar!\");\r\n    const [blockBtns, setBlockBtns] = useState(false);\r\n\r\n    uploadProfilePic = async () => {\r\n        if (route && route.params.photoData) {\r\n            setDisplayProgress(true);\r\n            const uri = route.params.photoData.uri;\r\n            const userId = await AsyncStorage.getItem('userDoc');\r\n            const extension = (uri.split('.'))[(uri.split('.')).length - 1];\r\n            const photoDt = {\r\n                name: userId + '.' + 'png',\r\n                contentType: 'image/' + extension,\r\n                contentLanguage: 'pt-Br',\r\n                type: \"Image\",\r\n                cacheControl: null,\r\n                contentLanguage: \"pt-Br\",\r\n                customMetadata: {\r\n                    height: route.params.photoData.height,\r\n                    width: route.params.photoData.width,\r\n                }\r\n            };\r\n            try {\r\n                setBlockBtns(true);\r\n                const storage = new Storage(\"profile\");\r\n                const uploadResp = await storage.uploadFile(uri, photoDt.name, photoDt);\r\n                const downloadUrl = await storage.downloadFileUrl(photoDt.name);\r\n                await AsyncStorage.setItem('profilePic', downloadUrl);\r\n                Toast.show({ type: 'success', text1: 'Sucesso', text2: 'A imagem foi carregada com sucesso!' });\r\n            } catch (error) {\r\n                Toast.show({ type: 'error', text1: 'Houve uma flaha no upload', text2: error.message });\r\n                setErrorMsg(error.message);\r\n                setDisplayMsg(true);\r\n            } finally {\r\n                setDisplayProgress(false);\r\n                setBlockBtns(false);\r\n                navigation.navigate(\"Profile\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <View style={{ flex: 1, justifyContent: 'center', flexDirection: 'column', backgroundColor: '#c5c5c5' }}>\r\n            <View style={{ justifyContent: 'center', flexDirection: 'row', marginVertical: 20, display: displayProgress ? \"flex\" : \"none\" }}>\r\n                <Text style={{ justifyContent: 'center', fontSize: 20 }}>Enviando...</Text>\r\n            </View>\r\n            <View style={{ flexDirection: 'row', justifyContent: 'space-evenly' }}>\r\n                <TouchableOpacity disabled={blockBtns} style={[st.btn, blockBtns && st.disabledButton]} onPress={uploadProfilePic}>\r\n                    <Text style={st.btnTxt}>Usar essa foto</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity disabled={blockBtns} style={[st.btn, blockBtns && st.disabledButton]} onPress={() => navigation.navigate(\"ChangeProfilePic\")}>\r\n                    <Text style={st.btnTxt}>Tentar novamente</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            <Text style={[st.msg, { display: displayMsg ? \"flex\" : \"none\" }]}>\r\n                {errorMsg}\r\n            </Text>\r\n            <View style={st.preview}>\r\n                {route.params.photoData.uri ?\r\n                    <Image source={{ uri: route.params.photoData.uri }} style={{ width: 300, height: 300 }} /> :\r\n                    <Text>Photo not taken</Text>}\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst st = StyleSheet.create({\r\n    btn: {\r\n        backgroundColor: 'darkblue',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: 135,\r\n        shadowColor: '#000',\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 5,\r\n    },\r\n    disabledButton: {\r\n        backgroundColor: '#69699b',\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: 135,\r\n        shadowColor: '#000',\r\n        elevation: 5,\r\n    },\r\n    btnTxt: {\r\n        textAlign: 'center',\r\n        color: '#c5c5c5'\r\n    },\r\n    msg: {\r\n        color: \"#7c0c0c\",\r\n        fontSize: 18,\r\n        paddingVertical: 15\r\n    },\r\n    preview: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 10\r\n    }\r\n});",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/UploadPic.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "UploadPic",
    "memberof": "src/screens/subscreens/UploadPic.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/UploadPic.jsx~UploadPic",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/UploadPic.jsx",
    "importStyle": "UploadPic",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *, \"route\": *}"
        ],
        "defaultRaw": {
          "navigation": null,
          "route": null
        },
        "defaultValue": "{\"navigation\":null,\"route\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "st",
    "memberof": "src/screens/subscreens/UploadPic.jsx",
    "static": true,
    "longname": "src/screens/subscreens/UploadPic.jsx~st",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/screens/subscreens/UploadPic.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/screens/subscreens/WebViewScreen.jsx",
    "content": "import WebView from 'react-native-webview';\r\n\r\n\r\nexport default function WebViewScreen({ route }) {\r\n    const { uri } = route.params;\r\n    return (\r\n        <WebView\r\n            source={{ uri: uri }}\r\n            style={{ flex: 1 }}\r\n            onNavigationStateChange={(navState) => {\r\n                if (!navState.canGoBack) {\r\n                    navigation.goBack();\r\n                }\r\n            }}\r\n        />\r\n    );\r\n}",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/screens/subscreens/WebViewScreen.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "WebViewScreen",
    "memberof": "src/screens/subscreens/WebViewScreen.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/subscreens/WebViewScreen.jsx~WebViewScreen",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/screens/subscreens/WebViewScreen.jsx",
    "importStyle": "WebViewScreen",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"route\": *}"
        ],
        "defaultRaw": {
          "route": null
        },
        "defaultValue": "{\"route\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/server/apidata.js",
    "content": "/**\r\n * A classe ApiRequests e responsavel por realizar requisicoes a uma API de dados financeiros e \r\n * fornecer metodos para obter informacoes sobre cotacoes de moedas.\r\n */\r\nexport default class ApiRequests {\r\n\r\n    /**\r\n     *  A URL base da API de onde as requisicoes serao feitas\r\n     */\r\n    baseUrl = \"https://economia.awesomeapi.com.br/last/\";\r\n\r\n    /**\r\n     * Obtem os dados mais recentes sobre cotacoes de moedas em relacao ao real\r\n     * @param {vector} moedas Uma lista de códigos de moedas no formato \"X-Y\", onde X e a moeda de origem e Y e a moeda de destino. O padrao e [\"USD-BRL\"]\r\n     * @returns Um objeto contendo as informacoes mais recentes das cotacoes das moedas solicitadas\r\n     * Em caso de erro durante a requisicao, a funcao imprime o erro no console para facilitar a depuracao\r\n     */\r\n    getMoneyData = async (moedas = [\"USD-BRL\"]) => {\r\n        let mList = \"\";\r\n        if (moedas.length > 0) {\r\n            mList = moedas.join(\",\");\r\n        }\r\n        try {\r\n            const response = await fetch(this.baseUrl + mList)\r\n            const json = await response.json()\r\n            return json;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/server/apidata.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "ApiRequests",
    "memberof": "src/server/apidata.js",
    "static": true,
    "longname": "src/server/apidata.js~ApiRequests",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/server/apidata.js",
    "importStyle": "ApiRequests",
    "description": "A classe ApiRequests e responsavel por realizar requisicoes a uma API de dados financeiros e \nfornecer metodos para obter informacoes sobre cotacoes de moedas.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "baseUrl",
    "memberof": "src/server/apidata.js~ApiRequests",
    "static": false,
    "longname": "src/server/apidata.js~ApiRequests#baseUrl",
    "access": "public",
    "description": " A URL base da API de onde as requisicoes serao feitas",
    "lineNumber": 10,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "getMoneyData",
    "memberof": "src/server/apidata.js~ApiRequests",
    "static": false,
    "longname": "src/server/apidata.js~ApiRequests#getMoneyData",
    "access": "public",
    "description": "Obtem os dados mais recentes sobre cotacoes de moedas em relacao ao real",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Um objeto contendo as informacoes mais recentes das cotacoes das moedas solicitadas\nEm caso de erro durante a requisicao, a funcao imprime o erro no console para facilitar a depuracao"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "vector"
        ],
        "spread": false,
        "optional": false,
        "name": "moedas",
        "description": "Uma lista de códigos de moedas no formato \"X-Y\", onde X e a moeda de origem e Y e a moeda de destino. O padrao e [\"USD-BRL\"]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Um objeto contendo as informacoes mais recentes das cotacoes das moedas solicitadas\nEm caso de erro durante a requisicao, a funcao imprime o erro no console para facilitar a depuracao"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/server/events.js",
    "content": "const data = require('./events.json');\r\n\r\n\r\nclass FindEvents {\r\n\r\n    initialCoord = {\r\n        lat: null,\r\n        lon: null\r\n    }\r\n\r\n    constructor(lat, long) {\r\n        this.initialCoord.lat = lat;\r\n        this.initialCoord.lon = long;\r\n    }\r\n\r\n    findClosestEvents = () => {\r\n        data.forEach(evento => {\r\n            const latEvento = evento.Local.latitude;\r\n            const lonEvento = evento.Local.longitude;\r\n            const distancia = this.calcularDistancia(this.initialCoord.lat, this.initialCoord.lon, latEvento, lonEvento);\r\n            \r\n            evento['Distancia em km'] = distancia;\r\n        });\r\n        const closest = data.sort((a, b) => a['Distancia em km'] - b['Distancia em km']);\r\n\r\n        return closest.slice(0,5);\r\n    }\r\n\r\n    calcularDistancia(lat1, lon1, lat2, lon2) {\r\n        const raioTerra = 6371; \r\n\r\n        const lat1Rad = this.toRadians(lat1);\r\n        const lon1Rad = this.toRadians(lon1);\r\n        const lat2Rad = this.toRadians(lat2);\r\n        const lon2Rad = this.toRadians(lon2);\r\n    \r\n\r\n        const dLon = lon2Rad - lon1Rad;\r\n        const dLat = lat2Rad - lat1Rad;\r\n    \r\n        const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    \r\n        const distancia = raioTerra * c; //km\r\n    \r\n        return distancia;\r\n    }\r\n    \r\n    toRadians(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n}\r\n\r\nconst x = new FindEvents(-21.7642, -43.3496).findClosestEvents();\r\nx.forEach(element => {\r\n    console.log(element.Local);\r\n});\r\n\r\n\r\nmodule.exports = FindEvents;",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/server/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "data",
    "memberof": "src/server/events.js",
    "static": true,
    "longname": "src/server/events.js~data",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/server/events.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "class",
    "name": "FindEvents",
    "memberof": "src/server/events.js",
    "static": true,
    "longname": "src/server/events.js~FindEvents",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/server/events.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "initialCoord",
    "memberof": "src/server/events.js~FindEvents",
    "static": false,
    "longname": "src/server/events.js~FindEvents#initialCoord",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/events.js~FindEvents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/events.js~FindEvents#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "findClosestEvents",
    "memberof": "src/server/events.js~FindEvents",
    "static": false,
    "longname": "src/server/events.js~FindEvents#findClosestEvents",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "calcularDistancia",
    "memberof": "src/server/events.js~FindEvents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/events.js~FindEvents#calcularDistancia",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "lat1",
        "types": [
          "*"
        ]
      },
      {
        "name": "lon1",
        "types": [
          "*"
        ]
      },
      {
        "name": "lat2",
        "types": [
          "*"
        ]
      },
      {
        "name": "lon2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "toRadians",
    "memberof": "src/server/events.js~FindEvents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/events.js~FindEvents#toRadians",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "degrees",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "x",
    "memberof": "src/server/events.js",
    "static": true,
    "longname": "src/server/events.js~x",
    "access": "public",
    "export": false,
    "importPath": "newbank/src/server/events.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/server/events_api.js",
    "content": "import cheerio from \"cheerio\";\r\nimport fetch from \"node-fetch\";\r\nimport apiKey from './apiKey.json';\r\n\r\n\r\n\r\nexport default class EventsApi {\r\n\r\n    bingmaps = \"http://dev.virtualearth.net/REST/v1/Locations\";\r\n    bingKey = apiKey[\"key\"];\r\n\r\n    /**\r\n     * Bing method to get the city from the current location\r\n     * @param {object} currentLocation - Current location coordinates (latitude and longitude)\r\n     * @returns String with the city name and state abbreviation (or false if no location is provided)\r\n     */\r\n    getCityFromCoordinates = async (currentLocation) => {\r\n        if (currentLocation && currentLocation.latitude && currentLocation.longitude) {\r\n            const locUrl = `${this.bingmaps}/${currentLocation.latitude, currentLocation.longitude}?&key=${this.bingKey}`;\r\n            const response = await fetch(locUrl);\r\n            const json = await response.json();\r\n            const dataAddress = json[\"resourceSets\"][0][\"resources\"][0][\"address\"];\r\n            const uf = dataAddress[\"adminDistrict\"];\r\n            const city = dataAddress[\"locality\"];\r\n            const adminDistrict2 = dataAddress[\"adminDistrict2\"];\r\n            const theplace = city ? city : adminDistrict2;\r\n            return `${theplace.replace(\" \", \"-\")}-${uf}`;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cria um json com as informações dos eventos\r\n     * @param {string} event - html da página\r\n     * @returns json com os eventos\r\n     */\r\n    createEventsJson = (event) => {\r\n        const $ = cheerio.load(event);\r\n        const eventos = [];\r\n\r\n        $('[class*=\\\"CardLink\\\"]').each((index, element) => {\r\n            const link = $(element).attr(\"href\").toString();\r\n            const loc = $(element).children().find(\"[class*=\\\"EventLocation\\\"]\").text();\r\n            const title = $(element).children().find(\"[class*=\\\"EventTitle\\\"]\").text();\r\n            const dates = $(element).children().find(\"[class*=\\\"EventDate\\\"] div div\");\r\n            let finalDates;\r\n            const numberOfElements = dates.length;\r\n            if (numberOfElements > 1) {\r\n                const start = $(dates[0]).text();\r\n                const end = $(dates[1]).text();\r\n                finalDates = start + \" - \" + end;\r\n            } else {\r\n                finalDates = $(dates[0]).text();\r\n            }\r\n\r\n            eventos.push({ \"Nome\": title, \"Local\": loc, \"Date\": finalDates, \"Link\": link });\r\n        });\r\n        return eventos;\r\n    }\r\n\r\n    /**\r\n     * Faz o request e pega as informações dos eventos\r\n     * @param {string} local - Formato: cidade-sem-espaco-siglaDoEstado (ex: juiz-de-fora-mg)\r\n     * @returns json com os eventos\r\n     */\r\n    getEventsData = async (local) => {\r\n        if(!local){\r\n            local = \"juiz-de-fora-mg\";\r\n        }\r\n\r\n        const url = `https://www.sympla.com.br/eventos/${local}?s=financeiro`;\r\n        try {\r\n            const response = await fetch(``, {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"Host\": \"www.sympla.com.br\",\r\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0\",\r\n                    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\r\n                    \"Accept-Language\": \"pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3\",\r\n                    \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                    \"Referer\": url,\r\n                    \"Upgrade-Insecure-Requests\": \"1\",\r\n                    \"Sec-Fetch-Dest\": \"document\",\r\n                    \"Sec-Fetch-Mode\": \"navigate\",\r\n                    \"Sec-Fetch-Site\": \"same-origin\",\r\n                    \"Sec-Fetch-User\": \"?1\",\r\n                    \"Connection\": \"keep-alive\"\r\n                }\r\n            })\r\n            const html = await response.text();\r\n            const json = this.createEventsJson(html);\r\n            return json;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a request to get the events details\r\n     * @param {object} eventJson - JSON representation of the events\r\n     * @returns event object with more details\r\n     */\r\n    getEventsDetails = async (eventJson) => {\r\n        console.log(eventJson);\r\n        const response = await fetch(eventJson[index][\"Link\"], {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'text/html'\r\n            }\r\n        });\r\n        const respTxt = await response.text();\r\n        //console.log(respTxt);\r\n        console.log(eventJson[index][\"Link\"]);\r\n        const $ = cheerio.load(respTxt);\r\n        \r\n        let loc_details_els = $.find('body section:nth-of-type(3) #event-location + *:not(button) :not(button):not(svg):not(path)');\r\n        final = \"\";\r\n        loc_details_els.forEach(element => {\r\n            final += element.text() + \" - \";\r\n        });\r\n        console.log(final);\r\n        console.log(loc_details_els);\r\n\r\n\r\n\r\n        // const eventsDetails = [];\r\n        // console.log(eventJson.length);\r\n        // for (let index = 0; index < eventJson.length; index++) {\r\n        //     if (index == 0) {\r\n        //         const response = await fetch(eventJson[index][\"Link\"], {\r\n        //             method: 'GET',\r\n        //             headers: {\r\n        //                 'Accept': 'text/html'\r\n        //             }\r\n        //         });\r\n        //         const respTxt = await response.text();\r\n        //         //console.log(respTxt);\r\n        //         console.log(eventJson[index][\"Link\"]);\r\n\r\n        //         const $ = cheerio.load(respTxt);\r\n                // let loc_details_els = $('body section:nth-of-type(3) #event-location + *:not(button) :not(button):not(svg):not(path)').find();\r\n                // final = \"\";\r\n                // loc_details_els.forEach(element => {\r\n                //     final += element.text() + \" - \";\r\n                // });\r\n                // console.log(final);\r\n                // console.log(loc_details_els);\r\n            //}\r\n        //}\r\n        // eventJson.forEach(async event => {\r\n        //     const response = await fetch(event[\"Link\"]);\r\n        //     console.log(await response.text());\r\n        //     const $ = cheerio.load(await response.text());\r\n        //     let loc_details = $('body section:nth-of-type(3) #event-location + *:not(button) :not(button):not(svg):not(path)').text();\r\n        //     loc_details.replace(\"<h4>\", \"\");\r\n        //     loc_details.replace(\"</h4>\", \"\");\r\n        //     loc_details.replace(\"<p>\", \"\");\r\n        //     loc_details.replace(\"</p>\", \"\");\r\n        //     eventsDetails.push({\r\n        //         ...event,\r\n        //         \"Local_Details\": loc_details\r\n        //     });\r\n        // });\r\n        return eventsDetails;\r\n    }\r\n\r\n    /**\r\n     * Get the coordinates from the event place\r\n     * @param {string} eventPlace - Place of the event that\r\n     * @returns Coordinates of the event\r\n     */\r\n    getEventCoordinates = async (eventPlace) => {\r\n        const locUrl = `${this.bingmaps}?countryRegion=BR&adminDistrict=MG&locality=Juiz de Fora&addressLine=olegário maciel&key=${this.bingKey}`;\r\n        const response = await fetch(locUrl);\r\n        const json = await response.json();\r\n        const coordinates = json[\"resourceSets\"][0][\"resources\"][0][\"point\"][\"coordinates\"];\r\n        return { latitude: coordinates[0], longitude: coordinates[1] };\r\n    }\r\n\r\n    /**\r\n     * Finds the closest events from the current location\r\n     * @param {object} data - JSON representation of all the events\r\n     * @returns List with 5 closest events\r\n     */\r\n    findClosestEvents = (data) => {\r\n        data.forEach(evento => {\r\n            const latEvento = evento.Local.latitude;\r\n            const lonEvento = evento.Local.longitude;\r\n            const distancia = this.calculateDistance(this.initialCoord.lat, this.initialCoord.lon, latEvento, lonEvento);\r\n            \r\n            evento['Distancia em km'] = distancia;\r\n        });\r\n        const closest = data.sort((a, b) => a['Distancia em km'] - b['Distancia em km']);\r\n\r\n        return closest.slice(0,5);\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance between two events\r\n     * @param {number} lat1 - First event latitude\r\n     * @param {number} lon1 - First event longitude\r\n     * @param {number} lat2 - Second event latitude\r\n     * @param {number} lon2 - Second event longitude\r\n     * @returns distance between events\r\n     */\r\n    calculateDistance(lat1, lon1, lat2, lon2) {\r\n        const raioTerra = 6371; \r\n\r\n        const lat1Rad = this.toRadians(lat1);\r\n        const lon1Rad = this.toRadians(lon1);\r\n        const lat2Rad = this.toRadians(lat2);\r\n        const lon2Rad = this.toRadians(lon2);\r\n    \r\n\r\n        const dLon = lon2Rad - lon1Rad;\r\n        const dLat = lat2Rad - lat1Rad;\r\n    \r\n        const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    \r\n        const distancia = raioTerra * c; //km\r\n    \r\n        return distancia;\r\n    }\r\n    \r\n    /**\r\n     * Convert degrees to radians\r\n     * @param {number} degrees \r\n     * @returns Number in radians\r\n     */\r\n    toRadians(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "E:/finalproj-devmovel/src/server/events_api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "EventsApi",
    "memberof": "src/server/events_api.js",
    "static": true,
    "longname": "src/server/events_api.js~EventsApi",
    "access": "public",
    "export": true,
    "importPath": "newbank/src/server/events_api.js",
    "importStyle": "EventsApi",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "bingmaps",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#bingmaps",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "bingKey",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#bingKey",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "getCityFromCoordinates",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#getCityFromCoordinates",
    "access": "public",
    "description": "Bing method to get the city from the current location",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "String with the city name and state abbreviation (or false if no location is provided)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentLocation",
        "description": "Current location coordinates (latitude and longitude)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "String with the city name and state abbreviation (or false if no location is provided)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "createEventsJson",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#createEventsJson",
    "access": "public",
    "description": "Cria um json com as informações dos eventos",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "json com os eventos"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "html da página"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "json com os eventos"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "getEventsData",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#getEventsData",
    "access": "public",
    "description": "Faz o request e pega as informações dos eventos",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "json com os eventos"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "local",
        "description": "Formato: cidade-sem-espaco-siglaDoEstado (ex: juiz-de-fora-mg)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "json com os eventos"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "getEventsDetails",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#getEventsDetails",
    "access": "public",
    "description": "Makes a request to get the events details",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "event object with more details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "eventJson",
        "description": "JSON representation of the events"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "event object with more details"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "getEventCoordinates",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#getEventCoordinates",
    "access": "public",
    "description": "Get the coordinates from the event place",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Coordinates of the event"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventPlace",
        "description": "Place of the event that"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Coordinates of the event"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "findClosestEvents",
    "memberof": "src/server/events_api.js~EventsApi",
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#findClosestEvents",
    "access": "public",
    "description": "Finds the closest events from the current location",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "List with 5 closest events"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON representation of all the events"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "List with 5 closest events"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "calculateDistance",
    "memberof": "src/server/events_api.js~EventsApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#calculateDistance",
    "access": "public",
    "description": "Calculates the distance between two events",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "distance between events"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat1",
        "description": "First event latitude"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon1",
        "description": "First event longitude"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lat2",
        "description": "Second event latitude"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lon2",
        "description": "Second event longitude"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "distance between events"
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "toRadians",
    "memberof": "src/server/events_api.js~EventsApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/events_api.js~EventsApi#toRadians",
    "access": "public",
    "description": "Convert degrees to radians",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Number in radians"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Number in radians"
    }
  },
  {
    "kind": "index",
    "content": "# App para controle financeiro\r\n\r\n[![Publish Docs to Github Pages](https://github.com/lauraFCa/finalproj-devmovel/actions/workflows/docs.yml/badge.svg)](https://github.com/lauraFCa/finalproj-devmovel/actions/workflows/docs.yml)\r\n\r\n<a target=\"_blank\" href=\"https://laurafca.github.io/finalproj-devmovel/\">Documentação</a>\r\n\r\n\r\n**Telas:**\r\n\r\n- Login / Cadastro\r\n- Home\r\n- Perfil\r\n- Configurações\r\n- Gráficos\r\n- Cotações (moedas)\r\n- Lista de Investimentos\r\n- Alteração dos investimentos\r\n\r\n## Home\r\n\r\n- Dados do usuário (nome e foto)  \r\n  - Obtidos do banco\r\n  - Animações de entrada\r\n  - Foto do usuário\r\n\r\n- Saldo da conta  \r\n  - Obtido do banco e calculado\r\n  - Animação de entrada\r\n  - Pode ser \"escondido\" com um toque\r\n\r\n- Menu de ações\r\n  - Novos cadastros e navegação\r\n  - Scroll horizontal\r\n\r\n- Transações passadas\r\n  - Lista com as transações cadastradas pelo usuário\r\n  - Valores \"escondidos\", aparecem com o toque na região cinza\r\n\r\n### Ações possíveis\r\n\r\n- Acessar perfil \r\n- Cadastrar:\r\n  - Nova receita (entrada)\r\n  - Nova compra\r\n  - Novo gasto\r\n\r\n- Ir para Perfil\r\n- Ir para Configurações\r\n- Ir para Gráficos\r\n- Ir para Cotaçõess\r\n\r\n## Perfil \r\n\r\n- Dados do usuário\r\n- Ver foto de usuário\r\n- Alterar foto de usuário\r\n- Lista de ações de interesse\r\n- Permite marcar ou desmarcar ações existentes\r\n- Permite adicionar uma nova ação de interesse\r\n\r\n## Configurações\r\n\r\n- Todos os dados do usuário (Nome, Email, Profissão, Perfil de Investimento)\r\n- Permite alterar os dados\r\n\r\n## Gráficos\r\n\r\n- Gráficos relacionados ao financeiro da aplicação:\r\n  - Gráfico de Pizza: Gastos X Receitas\r\n  - Gráfico de Barras: Receitas\r\n  - Gráfico de Linha: Gastos\r\n\r\n## Cotações\r\n\r\nGráficos de Barras com a comparação de valores das moedas: Peso argentino, Dolar USA e Euro, em relação ao Real (BR)\r\n\r\nRealiza uma requisição de API para obter essas cotações.\r\n\r\n## Projeto\r\n\r\nBibliotecas chave para o **funcionamento da aplicação**:\r\n\r\n- Animation\r\n- AsyncStorage\r\n- Chart Kit\r\n- Checkbox\r\n- DatePicker\r\n- Expo\r\n- Firebase\r\n- Flash Message\r\n- Modal\r\n- React Navigation\r\n- Select-dropdown\r\n- Styled Components\r\n- Expo-camera\r\n- React-Native Progress\r\n- React-Native Toast Message\r\n\r\n**Gerar documentação:**  \r\n``` ./node_modules/.bin/esdoc ```\r\n\r\n**Gerar APK**\r\ns\r\n``` npm install -g eas-cli ```  \r\n(instalar eas-cli globalmente, caso não esteja)\r\n\r\n``` eas build -p android ```  \r\nOBS: Expo account is required",
    "longname": "E:\\finalproj-devmovel\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"newbank\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"node_modules/expo/AppEntry.js\",\r\n  \"scripts\": {\r\n    \"start\": \"expo start\",\r\n    \"android\": \"expo start --android\",\r\n    \"ios\": \"expo start --ios\",\r\n    \"web\": \"expo start --web\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@gorhom/bottom-sheet\": \"^4.6.1\",\r\n    \"@react-native-async-storage/async-storage\": \"1.21.0\",\r\n    \"@react-native-community/checkbox\": \"^0.5.17\",\r\n    \"@react-native-community/datetimepicker\": \"7.6.1\",\r\n    \"@react-native-firebase/app\": \"^19.1.2\",\r\n    \"@react-native-firebase/database\": \"^19.1.2\",\r\n    \"@react-navigation/native\": \"^6.1.17\",\r\n    \"@react-navigation/stack\": \"^6.3.29\",\r\n    \"axios\": \"^1.6.8\",\r\n    \"cheerio\": \"^1.0.0-rc.12\",\r\n    \"expo\": \"50.0.17\",\r\n    \"expo-camera\": \"^14.1.3\",\r\n    \"expo-checkbox\": \"^2.7.0\",\r\n    \"expo-image-picker\": \"^15.0.4\",\r\n    \"expo-location\": \"^16.5.5\",\r\n    \"expo-sensors\": \"~12.9.1\",\r\n    \"expo-status-bar\": \"~1.11.1\",\r\n    \"firebase\": \"^10.11.1\",\r\n    \"i\": \"^0.3.7\",\r\n    \"npm\": \"^10.5.1\",\r\n    \"react\": \"18.2.0\",\r\n    \"react-native\": \"0.73.6\",\r\n    \"react-native-camera\": \"^4.2.1\",\r\n    \"react-native-chart-kit\": \"^6.12.0\",\r\n    \"react-native-flash-message\": \"^0.4.2\",\r\n    \"react-native-gesture-handler\": \"2.14.0\",\r\n    \"react-native-maps\": \"1.10.0\",\r\n    \"react-native-modal\": \"^13.0.1\",\r\n    \"react-native-progress\": \"^5.0.1\",\r\n    \"react-native-reanimated\": \"^3.6.2\",\r\n    \"react-native-safe-area-context\": \"4.8.2\",\r\n    \"react-native-select-dropdown\": \"^4.0.0\",\r\n    \"react-native-toast-message\": \"^2.2.0\",\r\n    \"react-native-walkthrough-tooltip\": \"^1.6.0\",\r\n    \"react-native-webview\": \"13.6.4\",\r\n    \"semver\": \"7.5.2\",\r\n    \"styled-components\": \"^6.1.8\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.20.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\"\r\n  },\r\n  \"private\": true\r\n}\r\n",
    "longname": "E:\\finalproj-devmovel\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "E:\\finalproj-devmovel\\manual\\asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\UserGuide.md",
    "name": "./manual/UserGuide.md",
    "content": "# Guia do Usuário\r\n\r\n## Aplicativo de Finanças Pessoais\r\n\r\nBem-vindo ao nosso aplicativo de finanças pessoais! Este guia tem como objetivo fornecer instruções simples sobre como utilizar as principais funcionalidades do aplicativo.\r\n\r\n### 1. **Página Inicial:**\r\n\r\n   - Ao abrir o aplicativo, você será direcionado à página inicial, onde poderá visualizar um resumo do seu dinheiro em diferentes categorias, como receitas, despesas, investimentos, entre outros.\r\n\r\n### 2. **Perfil:**\r\n\r\n   - Acesse a página de perfil clicando no ícone de perfil no canto superior direito. Aqui, você pode visualizar e editar informações pessoais, como nome, email, profissão e perfil de investimento.\r\n\r\n### 3. **Movimentações:**\r\n\r\n   - Na página de movimentações, você pode ver uma lista de todas as suas transações, incluindo receitas e despesas. Toque em cada transação para visualizar detalhes adicionais.\r\n\r\n### 4. **Investimentos:**\r\n\r\n   - Acesse a seção de investimentos para adicionar ou visualizar investimentos. Você pode adicionar novos investimentos e acompanhar o desempenho dos investimentos existentes.\r\n\r\n### 5. **Análise Gráfica:**\r\n\r\n   - Explore as análises gráficas para ter uma visão mais clara das suas finanças. Os gráficos mostram informações sobre gastos, receitas e investimentos.\r\n\r\n### 6. **Câmbio:**\r\n\r\n   - Verifique as cotações de moedas estrangeiras na seção de câmbio. As cotações são atualizadas regularmente.\r\n\r\n### 7. **Configurações:**\r\n\r\n   - Personalize o aplicativo conforme suas preferências na seção de configurações. Você pode alterar informações pessoais, como nome, email, profissão e perfil de investimento.\r\n\r\n### 8. **Sair:**\r\n\r\n   - Para encerrar a sessão, toque em \"Sair\" na seção de configurações. Isso garantirá a segurança dos seus dados.\r\n\r\n### Nota Importante:\r\n\r\n   - Certifique-se de manter seu perfil e movimentações atualizados para obter uma análise precisa das suas finanças.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\AuthScreen.md",
    "name": "./manual/AuthScreen.md",
    "content": "# AuthScreen\r\n\r\nEste componente React-Native, chamado de `AuthScreen`, representa a tela de autenticação do aplicativo.  \r\nOferece funcionalidades de login e cadastro, interagindo com um banco de dados Firebase para gerenciar usuários.\r\n\r\n## Funcionalidades Principais\r\n\r\n1. **Autenticação e Navegação:**\r\n   - Utiliza o contexto `useLoading` para exibir indicadores de carregamento durante operações assíncronas.\r\n   - Utiliza o `AsyncStorage` para persistir a informação de autenticação (`isAuth`).\r\n\r\n2. **Gerenciamento de Usuários:**\r\n   - Utiliza a classe `Storage` para interagir com o Firebase e obter informações sobre usuários.\r\n   - Ao montar o componente, verifica se o usuário já está autenticado, redirecionando-o para a tela inicial (`Splash`) se necessário.\r\n\r\n3. **Estados e Campos de Entrada:**\r\n   - Utiliza estados para controlar diferentes aspectos do componente, incluindo informações de usuários, mensagens de erro, visibilidade de senha, entre outros.\r\n   - Campos de entrada controlados por estados para email e senhas.\r\n\r\n4. **Manipulação de Senhas:**\r\n   - Oferece funcionalidade para alternar a visibilidade da senha durante a entrada de texto, utilizando ícones visuais (`eye`).\r\n\r\n5. **Login e Cadastro:**\r\n   - Função `handleSignUp` para cadastrar novos usuários no Firebase, verificando se o email já existe.\r\n   - Função `handleSignIn` para autenticar usuários, exibindo mensagens de erro caso o email ou senha não sejam válidos.\r\n\r\n6. **Limpeza de Campos:**\r\n   - Função `clearFields` para limpar os campos do formulário, utilizada após operações de login ou cadastro.\r\n\r\n7. **Feedback ao Usuário:**\r\n   - Exibe mensagens de erro em caso de problemas durante o login ou cadastro.\r\n   - Oferece link para recuperação de senha em caso de erro no login.\r\n\r\n8. **Estilo e Layout:**\r\n   - Utiliza estilos específicos para proporcionar uma experiência visual agradável ao usuário.\r\n\r\n## Componentes Utilizados\r\n\r\n- `React`, `useState`, `useEffect` para gerenciar o estado e o ciclo de vida.\r\n- Componentes de interface como `View`, `Text`, `TextInput`, `Button`, `TouchableOpacity`, `Image`.\r\n- Ícones fornecidos pelos pacotes `@expo/vector-icons` (Foundation, Ionicons).\r\n\r\n## Observações\r\n\r\n- O componente pode ser integrado a um fluxo de autenticação mais amplo em um aplicativo, proporcionando funcionalidades essenciais de login e cadastro.\r\n\r\nLembre-se de ajustar qualquer configuração específica do seu projeto, como a configuração do Firebase, para que o componente funcione corretamente no contexto do seu aplicativo.\r\n\r\n![Auth screen](asset/auth.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\Context.md",
    "name": "./manual/Context.md",
    "content": "# Context\r\n\r\n## Descrição\r\n\r\nO contexto de carregamento (`LoadingContext`) é utilizado para gerenciar o estado de carregamento na aplicação. Ele fornece funções que permitem mostrar ou ocultar um indicador de carregamento, bem como a capacidade de sinalizar se uma atualização ou refresh é necessário.\r\n\r\n## Componentes\r\n\r\n### `LoadingProvider`\r\n\r\nO componente `LoadingProvider` é um provedor de contexto que envolve a aplicação. Ele fornece o estado de carregamento e funções relacionadas para os componentes filhos.\r\n\r\n#### Propriedades\r\n\r\n- **children:** Componentes filhos envolvidos pelo provedor.\r\n\r\n#### Funções do Contexto\r\n\r\n1. **`showLoading()`**\r\n   - Exibe o indicador de carregamento.\r\n\r\n2. **`hideLoading()`**\r\n   - Oculta o indicador de carregamento.\r\n\r\n3. **`getShouldRefresh(): boolean`**\r\n   - Retorna o estado atual de sinalização para refresh.\r\n\r\n4. **`setShouldRefresh(should: boolean)`**\r\n   - Atualiza o estado de sinalização para refresh.\r\n\r\n### `useLoading()`\r\n\r\nO hook `useLoading` é utilizado pelos componentes filhos para acessar as funções e o estado do contexto de carregamento.\r\n\r\n### `LoadingIndicator`\r\n\r\nO componente `LoadingIndicator` é um indicador de carregamento exibido enquanto o estado de carregamento está ativo.\r\n\r\n## Uso\r\n\r\n```jsx\r\n// Dentro do componente pai mais externo da aplicação\r\nimport { LoadingProvider } from './caminho/para/o/seu/arquivo';\r\n\r\nfunction App() {\r\n  return (\r\n    <LoadingProvider>\r\n      {/* Seus componentes aqui */}\r\n    </LoadingProvider>\r\n  );\r\n}\r\n\r\n// Em qualquer componente filho que precise acessar o contexto de carregamento\r\nimport { useLoading } from './caminho/para/o/seu/arquivo';\r\n\r\nfunction SeuComponente() {\r\n  const { showLoading, hideLoading, getShouldRefresh, setShouldRefresh } = useLoading();\r\n\r\n  // Lógica do componente usando as funções e o estado do contexto\r\n}\r\n```\r\n\r\n## Estilos\r\n\r\n### `container`\r\n\r\nO estilo `container` é aplicado ao componente `LoadingIndicator` para posicionar o indicador de carregamento no centro da tela, com um fundo semitransparente.\r\n\r\n## Observações\r\n\r\n1. **Indicador de Carregamento:**\r\n   - O componente `LoadingIndicator` utiliza o componente `ActivityIndicator` do React Native para exibir um indicador de carregamento.\r\n\r\n2. **Sinalização para Refresh:**\r\n   - A função `setShouldRefresh` e `getShouldRefresh` permite que os componentes filhos sinalizem a necessidade de atualização ou refresh para o componente pai.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\Home.md",
    "name": "./manual/Home.md",
    "content": "# Home\r\n\r\n## Funcionalidades Principais\r\n\r\nA página Home é responsável por exibir informações financeiras essenciais para o usuário, oferecendo uma visão geral de seu saldo, movimentações financeiras recentes e acesso rápido a funcionalidades adicionais.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Exibição de Saldo:**\r\n   - Apresenta o saldo atual do usuário.\r\n   - Oferece uma dica para explicar a seção de saldo.\r\n\r\n2. **Movimentações Financeiras Recentes:**\r\n   - Mostra as últimas transações financeiras do usuário.\r\n   - Permite visualizar detalhes de receitas e despesas.\r\n\r\n3. **Menu de Navegação:**\r\n   - Facilita o acesso a diferentes seções do aplicativo.\r\n   - Fornece uma dica para orientação sobre o menu.\r\n\r\n4. **Atualização Automática:**\r\n   - Atualiza automaticamente os dados quando necessário.\r\n\r\n## Componentes Utilizados\r\n\r\nA página Home utiliza vários componentes personalizados para organizar e exibir informações de forma clara e amigável. Os componentes principais incluem:\r\n\r\n1. **Balance:**\r\n   - Responsável por exibir o saldo do usuário.\r\n   - Apresenta uma dica interativa.\r\n\r\n2. **Header:**\r\n   - Renderiza a seção de cabeçalho com detalhes do usuário.\r\n\r\n3. **Menu:**\r\n   - Exibe opções de navegação para diferentes seções do aplicativo.\r\n   - Inclui uma dica para orientar o usuário.\r\n\r\n4. **Movements:**\r\n   - Renderiza as movimentações financeiras recentes.\r\n   - Oferece detalhes sobre receitas e despesas.\r\n\r\n## Pré-requisito\r\n\r\nPara usar a página Home, é necessário garantir que o aplicativo tenha acesso à API do Firebase Firestore para recuperar dados do usuário. Além disso, o aplicativo deve ter o AsyncStorage configurado para armazenar informações localmente.\r\n\r\n## Observações\r\n\r\n1. A página Home utiliza o conceito de Hooks do React para gerenciar estados e efeitos colaterais.\r\n2. A atualização automática dos dados é acionada quando necessário, garantindo informações precisas.\r\n3. As dicas interativas são fornecidas para orientar os usuários nas seções de saldo e menu de navegação.\r\n4. O código está organizado de forma modular, facilitando a manutenção e escalabilidade.\r\n\r\n\r\n![Home screen](asset/home.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\Money.md",
    "name": "./manual/Money.md",
    "content": "# Money\r\n\r\nA tela `Money` exibe informações sobre as cotações de moedas em relação ao Real (BRL).  \r\nUtiliza a classe `ApiRequests` para fazer requisições à API e obter dados atualizados sobre as cotações.  \r\nAs cotações de três moedas (Dólar, Euro e Peso Argentino) são exibidas em gráficos usando o componente `MoneysGraph`.\r\n\r\n## Principais Características\r\n\r\n1. **Cotações de Moedas:**\r\n   - Utiliza a classe `ApiRequests` para obter dados das cotações de moedas.\r\n   - As moedas exibidas são Dólar (USD), Euro (EUR) e Peso Argentino (ARS).\r\n\r\n2. **Gráficos de Cotação:**\r\n   - Para cada moeda, exibe um gráfico utilizando o componente `MoneysGraph`.\r\n   - Os gráficos apresentam a relação da moeda com o Real (BRL).\r\n   - Os dados incluem a taxa de câmbio de compra (`ask`) e uma constante para referência.\r\n\r\n3. **Componente MoneysGraph:**\r\n   - O componente `MoneysGraph` é utilizado para exibir os gráficos de barras das cotações de moedas.\r\n   - Os dados do gráfico são passados como propriedades (`bardata` e `name`).\r\n\r\n4. **Botão de Retorno à Tela Inicial:**\r\n   - Inclui um botão de retorno à tela inicial (Home) para facilitar a navegação.\r\n   - O botão utiliza o ícone de seta para trás da biblioteca `Ionicons`.\r\n\r\n5. **Estilo Responsivo:**\r\n   - Utiliza estilos que proporcionam uma boa aparência e organização na tela.\r\n   - Adota margens e espaçamentos para melhorar a legibilidade e usabilidade.\r\n\r\n## Exemplo de Uso\r\n\r\n```jsx\r\n<Money />\r\n```\r\n\r\n## Observações\r\n\r\n- A tela utiliza o contexto de carregamento (`useLoading`) para exibir e ocultar indicadores de carregamento durante a obtenção dos dados.\r\n- Os gráficos de cotação são exibidos usando o componente `MoneysGraph`, que provavelmente é importado de um arquivo separado.\r\n- A tela inclui uma rolagem (`ScrollView`) para acomodar os gráficos, permitindo a visualização de todas as informações em uma única página.\r\n- As cotações de moedas são obtidas no momento da renderização da tela, garantindo informações atualizadas.\r\n\r\n![Money screen](asset/graficos.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\Profile.md",
    "name": "./manual/Profile.md",
    "content": "# Página Perfil\r\n\r\n## Funcionalidades Principais\r\n\r\nA página Perfil apresenta informações detalhadas sobre o usuário, incluindo dados pessoais, preferências de investimento e ações de interesse. Possui funcionalidades para modificar a foto do usuário, visualizar e alterar informações pessoais e de investimentos.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Visualização de Dados Pessoais:**\r\n   - Exibe o nome, e-mail, profissão e perfil de investimento do usuário.\r\n   - Permite a modificação da foto do perfil (ainda não implementada).\r\n\r\n2. **Ações de Interesse:**\r\n   - Mostra as ações marcadas como interesse pelo usuário.\r\n   - Possibilita a alteração dessas ações.\r\n\r\n3. **Alteração de Ações de Interesse:**\r\n   - Permite ao usuário modificar suas escolhas de ações de interesse.\r\n   - Ao clicar em \"Alterar\", redireciona para a página de seleção de ações.\r\n\r\n4. **Navegação Rápida:**\r\n   - Inclui um botão para retornar à página inicial (Home) do aplicativo.\r\n\r\n5. **Alterar foto de perfil**\r\n   - Ao clicar na foto de perfil o usuário é levado a outra tela onde poderá atualizar sua foto de perfil do aplicativo\r\n\r\n## Componentes Utilizados\r\n\r\nA página Perfil utiliza componentes do React Native para criar uma interface amigável e interativa. Alguns dos principais componentes incluem:\r\n\r\n1. **Feather e MaterialIcons:**\r\n   - Ícones utilizados para representar ações e navegação.\r\n  \r\n2. **TouchableOpacity:**\r\n   - Componente que possibilita a criação de botões clicáveis.\r\n\r\n3. **ScrollView:**\r\n   - Utilizado para criar uma área rolável para a lista de ações de interesse.\r\n\r\n## Observações\r\n\r\n1. **Modificação de Foto do Perfil:**\r\n   - A funcionalidade para modificar a foto do perfil ainda não foi implementada.\r\n\r\n2. **Atualização Automática:**\r\n   - A página realiza atualizações automáticas conforme necessário para garantir dados precisos.\r\n\r\n3. **Interatividade:**\r\n   - Oferece uma experiência interativa ao clicar em botões e modificar a lista de ações de interesse.\r\n\r\n4. **Estilo Visual:**\r\n   - Utiliza estilos visuais para proporcionar uma aparência atraente e coesa ao usuário.\r\n\r\n5. **Código Organizado:**\r\n   - O código fonte está organizado de forma a facilitar a manutenção e extensão do aplicativo.\r\n\r\n## Exemplo de Uso\r\n\r\n```jsx\r\n<Perfil navigation={navigation} />\r\n```\r\n\r\n**Referências de Ícones:**\r\n- `Feather`: Ícone de usuário para a alteração de foto de perfil.\r\n- `MaterialIcons`: Ícone de casa para o botão de navegação de volta à página inicial.\r\n- `AntDesign`: Ícone de adição para adicionar novos investimentos.\r\n\r\n\r\n![Profile Screen](asset/perfil.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\Settings.md",
    "name": "./manual/Settings.md",
    "content": "# Settings\r\n\r\nA tela `Settings` é responsável por exibir e permitir a edição de informações do usuário, como nome, email, profissão e perfil de investimento.  \r\nAlém disso, fornece um botão para retornar à tela inicial (`Home`) e outro para realizar o logout (`Sair`).\r\n\r\n## Principais Características\r\n\r\n1. **Exibição e Edição de Dados:**\r\n   - Utiliza o componente `ChangeData` para exibir e permitir a edição de diferentes campos de dados do usuário, como nome, email, profissão e perfil de investimento.\r\n   - Ao editar um campo, aciona uma função `refresh` para atualizar as informações na tela.\r\n\r\n2. **Botão de Retorno à Tela Inicial:**\r\n   - Inclui um botão de retorno à tela inicial (Home) para facilitar a navegação.\r\n   - O botão utiliza o ícone de casa da biblioteca `MaterialIcons`.\r\n\r\n3. **Botão de Logout (`Sair`):**\r\n   - Inclui um botão para realizar o logout do usuário.\r\n   - Ao clicar no botão, aciona a função `handleSair` que remove a autenticação e navega para a tela de autenticação (`Auth`).\r\n\r\n4. **Atualização Dinâmica dos Dados:**\r\n   - Utiliza o estado `smth` para acionar uma atualização dinâmica dos dados quando necessário.\r\n\r\n5. **Estilo Responsivo:**\r\n   - Utiliza estilos que proporcionam uma boa aparência e organização na tela.\r\n   - Adota margens, espaçamentos e posicionamento absoluto para melhorar a legibilidade e usabilidade.\r\n\r\n## Exemplo de Uso\r\n\r\n```jsx\r\n<Settings />\r\n```\r\n\r\n## Observações\r\n\r\n- A tela utiliza o contexto de carregamento (`useLoading`) para exibir e ocultar indicadores de carregamento durante a obtenção dos dados.\r\n- As informações do usuário são obtidas do Firebase (`fr.getFullDoc()`).\r\n- A função `refresh` é utilizada para acionar a atualização dos dados após uma edição.\r\n- O botão \"Sair\" (`handleSair`) realiza o logout do usuário e navega para a tela de autenticação (`Auth`).\r\n- A tela inclui um botão de retorno à tela inicial (`Home`) para facilitar a navegação.\r\n\r\n![Settings Screen](asset/settings.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\resources\\EventsMap.md",
    "name": "./manual/subscreens/resources/EventsMap.md",
    "content": "# EventsMap\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela EventsMap é responsável por exibir um mapa com eventos. As principais funcionalidades ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar seu propósito.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **A ser definido:**\r\n   - As funcionalidades principais desta tela ainda precisam ser definidas.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utilizará diversos componentes do React Native para criar uma interface intuitiva. Os componentes específicos ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais componentes serão utilizados.\r\n\r\n## Pré-requisitos\r\n\r\nOs pré-requisitos para utilizar a tela EventsMap ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais serão os pré-requisitos.\r\n\r\n## Observações\r\n\r\n1. **A ser definido:**\r\n   - As observações sobre esta tela ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar quais serão as observações.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\resources\\Graphs.md",
    "name": "./manual/subscreens/resources/Graphs.md",
    "content": "# Graphs\r\n\r\nO componente React-Native denominado `Graphs` é responsável por exibir gráficos relacionados às finanças do usuário, incluindo um gráfico de receitas e gastos, um gráfico de barras para receitas e um gráfico de linha para gastos.\r\n\r\n## Principais Características\r\n\r\n1. **Gastos X Receitas:**\r\n   - Utiliza um gráfico de pizza (`PieChart`) para visualizar a relação entre gastos e receitas.\r\n   - Cada categoria é representada por uma fatia no gráfico.\r\n   - Cores diferenciadas para representar gastos e receitas.\r\n\r\n2. **Gráfico de Receitas:**\r\n   - Apresenta um gráfico de barras (`BarChart`) para visualizar as receitas.\r\n   - As barras representam diferentes fontes de receita.\r\n   - Eixo Y rotulado em Reais (R$).\r\n\r\n3. **Gráfico de Gastos:**\r\n   - Mostra um gráfico de linha (`LineChart`) para visualizar os gastos ao longo do tempo.\r\n   - Cada ponto no gráfico representa um tipo de despesa.\r\n   - Toque em um ponto para exibir um alerta com detalhes sobre a despesa.\r\n\r\n4. **Integração com FlashMessage:**\r\n   - Utiliza o componente `FlashMessage` para exibir mensagens temporárias ao clicar em um ponto no gráfico de gastos.\r\n\r\n5. **Navegação de Volta:**\r\n   - Inclui um botão de navegação que permite voltar à página inicial.\r\n\r\n## Parâmetros\r\n\r\n- O componente não aceita parâmetros externos. Ele extrai dados diretamente da rota (`route.params.allData`).\r\n\r\n**Configurações de Gráficos:**\r\n- Configurações específicas para cada tipo de gráfico, como cores e estilos, são definidas para proporcionar uma experiência visual agradável.\r\n\r\n**Estilos Padrão:**\r\n- Os estilos são definidos para garantir a coesão visual dos gráficos e a legibilidade das informações.\r\n\r\n## Observações\r\n\r\n- O componente faz uso da Context API para exibição de loading durante a recuperação de dados.\r\n- As bibliotecas externas `react-native-chart-kit` e `react-native-flash-message` são utilizadas para renderizar os gráficos e exibir mensagens temporárias, respectivamente.\r\n\r\n\r\n**Referências de Ícones:**\r\n- `Ionicons`: Ícone de seta para voltar à página inicial.\r\n\r\n<br/>\r\n![Graphs screen](asset/finan.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\resources\\MapLoadingScreen.md",
    "name": "./manual/subscreens/resources/MapLoadingScreen.md",
    "content": "# MapLoadingScreen\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela MapLoadingScreen é responsável por exibir uma tela de carregamento enquanto o mapa está sendo carregado. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Exibição de Tela de Carregamento:**\r\n   - Exibe uma tela de carregamento enquanto o mapa está sendo carregado.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. Alguns dos principais componentes incluem:\r\n\r\n1. **ActivityIndicator:**\r\n   - Componente para exibir um indicador de atividade de carregamento.\r\n\r\n2. **View:**\r\n   - Componente para agrupar outros componentes.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela MapLoadingScreen, é necessário garantir que o aplicativo tenha acesso à internet para carregar o mapa.\r\n\r\n## Observações\r\n\r\n1. **Exibição de Tela de Carregamento:**\r\n   - A tela exibe um indicador de atividade de carregamento para informar ao usuário que o mapa está sendo carregado.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\resources\\Money.md",
    "name": "./manual/subscreens/resources/Money.md",
    "content": "# Money\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela Money é responsável por gerenciar as funcionalidades relacionadas ao dinheiro no aplicativo. As principais funcionalidades ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar seu propósito.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **A ser definido:**\r\n   - As funcionalidades principais desta tela ainda precisam ser definidas.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utilizará diversos componentes do React Native para criar uma interface intuitiva. Os componentes específicos ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais componentes serão utilizados.\r\n\r\n## Pré-requisitos\r\n\r\nOs pré-requisitos para utilizar a tela Money ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais serão os pré-requisitos.\r\n\r\n## Observações\r\n\r\n1. **A ser definido:**\r\n   - As observações sobre esta tela ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar quais serão as observações.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\resources\\SeePicture.md",
    "name": "./manual/subscreens/resources/SeePicture.md",
    "content": "# SeePicture\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela SeePicture é responsável por exibir uma foto selecionada pelo usuário. As principais funcionalidades ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar seu propósito.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **A ser definido:**\r\n   - As funcionalidades principais desta tela ainda precisam ser definidas.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utilizará diversos componentes do React Native para criar uma interface intuitiva. Os componentes específicos ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais componentes serão utilizados.\r\n\r\n## Pré-requisitos\r\n\r\nOs pré-requisitos para utilizar a tela SeePicture ainda precisam ser definidos, pois o arquivo atualmente não contém código suficiente para determinar quais serão os pré-requisitos.\r\n\r\n## Observações\r\n\r\n1. **A ser definido:**\r\n   - As observações sobre esta tela ainda precisam ser definidas, pois o arquivo atualmente não contém código suficiente para determinar quais serão as observações.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\ChangeProfilePic.md",
    "name": "./manual/subscreens/ChangeProfilePic.md",
    "content": "# ChangeProfilePic\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela de Alteração de Foto de Perfil permite ao usuário alterar sua foto de perfil usando a câmera do dispositivo. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Alteração de Foto de Perfil:**\r\n   - Permite ao usuário tirar uma nova foto com a câmera do dispositivo para usar como foto de perfil.\r\n\r\n2. **Verificação de Permissão:**\r\n   - Verifica se a permissão para usar a câmera foi concedida.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. Alguns dos principais componentes incluem:\r\n\r\n1. **Camera:**\r\n   - Componente para acessar a câmera do dispositivo.\r\n\r\n2. **View e Text:**\r\n   - Componentes para exibir uma mensagem caso a permissão para usar a câmera não tenha sido concedida.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela de Alteração de Foto de Perfil, é necessário garantir que o aplicativo tenha permissão para acessar a câmera do dispositivo.\r\n\r\n## Observações\r\n\r\n1. **Verificação de Permissão:**\r\n   - A tela verifica se a permissão para usar a câmera foi concedida. Se não, exibe uma mensagem informando ao usuário que a permissão não foi concedida.\r\n\r\n2. **Interação com o Usuário:**\r\n   - Oferece uma interface simples e interativa para facilitar a alteração da foto de perfil.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\InvestmentsCheckbox.md",
    "name": "./manual/subscreens/InvestmentsCheckbox.md",
    "content": "# InvestmentsCheckbox\r\n\r\n## Funcionalidades Principais\r\n\r\nA tela de Seleção de Ações de Interesse permite ao usuário visualizar e modificar suas escolhas de investimentos. As funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Visualização e Seleção de Ações:**\r\n   - Exibe a lista de ações de interesse do usuário.\r\n   - Permite ao usuário selecionar/deselecionar ações de interesse.\r\n\r\n2. **Atualização Automática:**\r\n   - Atualiza automaticamente a lista de ações conforme o usuário realiza seleções.\r\n\r\n3. **Salvar Alterações:**\r\n   - Possui um botão \"Salvar\" que, ao ser acionado, salva as alterações realizadas nas seleções de ações.\r\n\r\n4. **Adicionar Nova Ação:**\r\n   - Oferece um botão \"Novo\" para direcionar o usuário à página de cadastro de novas ações de interesse.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para proporcionar uma experiência amigável ao usuário. Alguns dos principais componentes incluem:\r\n\r\n1. **FlatList:**\r\n   - Utilizada para renderizar a lista de ações de interesse de forma eficiente.\r\n\r\n2. **TouchableOpacity:**\r\n   - Componente que possibilita a criação de botões clicáveis.\r\n\r\n3. **CheckBox Component:**\r\n   - Componente customizado para representar visualmente a seleção/deseleção de ações.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela de Seleção de Ações de Interesse, é necessário garantir que o aplicativo tenha acesso à API do Firebase Firestore para recuperar e armazenar dados do usuário. Além disso, o AsyncStorage deve estar configurado para armazenar informações localmente.\r\n\r\n## Observações\r\n\r\n1. **Interatividade Simples:**\r\n   - A tela é projetada para ser simples e intuitiva, permitindo ao usuário realizar suas escolhas de investimentos de forma rápida.\r\n\r\n2. **Feedback Visual:**\r\n   - Utiliza uma representação visual (checkBox) para indicar as ações de interesse selecionadas.\r\n\r\n3. **Botão \"Novo\":**\r\n   - Oferece um atalho para a página de cadastro de novas ações, facilitando a expansão da lista de investimentos.\r\n\r\n4. **Atualização Automática:**\r\n   - As alterações realizadas na seleção de ações são salvas automaticamente ao pressionar o botão \"Salvar\".\r\n\r\n5. **Estilo Visual:**\r\n   - Utiliza estilos visuais para proporcionar uma experiência agradável e coerente com o restante do aplicativo.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\SaveInvestment.md",
    "name": "./manual/subscreens/SaveInvestment.md",
    "content": "# SaveInvestment\r\n\r\n## Funcionalidades Principais\r\n\r\nA tela de Cadastro de Ações de Interesse permite ao usuário adicionar uma nova ação à sua lista de investimentos. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Cadastro de Nova Ação:**\r\n   - Permite ao usuário cadastrar uma nova ação de interesse.\r\n   - Requer a inserção da descrição da ação, seu valor atual e o status (crescimento ou queda).\r\n\r\n2. **Escolha de Status:**\r\n   - Oferece opções para o usuário selecionar o status da ação, indicando se está em crescimento ou queda.\r\n\r\n3. **Envio do Cadastro:**\r\n   - Após preencher os campos necessários, o usuário pode enviar o cadastro para ser salvo.\r\n\r\n4. **Navegação Rápida:**\r\n   - Inclui um botão para retornar à página de Investimentos.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. Alguns dos principais componentes incluem:\r\n\r\n1. **TextInput:**\r\n   - Componente para a entrada de texto, utilizado para inserir a descrição e o valor da ação.\r\n\r\n2. **TouchableOpacity:**\r\n   - Componente que possibilita a criação de botões clicáveis.\r\n\r\n3. **Button:**\r\n   - Botão nativo do React Native utilizado para acionar a submissão do cadastro.\r\n\r\n4. **AntDesign e Ionicons:**\r\n   - Ícones utilizados para representar as opções de crescimento e queda da ação, bem como para a navegação de retorno.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela de Cadastro de Ações de Interesse, é necessário garantir que o aplicativo tenha acesso à API do Firebase Firestore para recuperar e armazenar dados do usuário. Além disso, o AsyncStorage deve estar configurado para armazenar informações localmente.\r\n\r\n## Observações\r\n\r\n1. **Escolha do Status:**\r\n   - A tela permite ao usuário escolher entre \"Crescimento\" e \"Queda\" como status da ação.\r\n\r\n2. **Interação com o Usuário:**\r\n   - Oferece uma interface simples e interativa para facilitar o cadastro de novas ações.\r\n\r\n3. **Atualização Automática:**\r\n   - A tela atualiza automaticamente a lista de investimentos após o cadastro de uma nova ação.\r\n\r\n4. **Estilo Visual:**\r\n   - Utiliza estilos visuais para proporcionar uma experiência agradável ao usuário.\r\n\r\n5. **Botão de Retorno:**\r\n   - Inclui um botão para retornar à página de Investimentos após o cadastro ser concluído.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\SplashScreen.md",
    "name": "./manual/subscreens/SplashScreen.md",
    "content": "# SplashScreen\r\n\r\nEste componente React-Native, denominado `SplashScreen`, representa a tela inicial do aplicativo exibida durante a inicialização.  \r\nA função principal é realizar operações assíncronas, como a obtenção de dados do banco de dados Firebase, enquanto exibe o logotipo do aplicativo.  \r\nApós a conclusão das operações, redireciona para a tela principal (`Home`).\r\n\r\n## Funcionalidades Principais\r\n\r\n1. **Obtenção de Dados do Banco de Dados:**\r\n   - Utiliza o contexto `useLoading` para obter a string de autenticação e criar uma instância de `Storage` para interagir com o Firebase.\r\n   - Utiliza a função `getFullDoc` de `Storage` para obter dados completos do usuário no Firebase.\r\n   - Armazena os dados obtidos localmente utilizando o `AsyncStorage` para posterior referência no aplicativo.\r\n\r\n2. **Temporização de Exibição:**\r\n   - Utiliza `setTimeout` para simular uma breve pausa (5.5 segundos) antes de prosseguir para a próxima tela. Isso é comum em telas de introdução ou splash para exibir o logotipo por um curto período.\r\n\r\n3. **Navegação para a Próxima Tela:**\r\n   - Utiliza `useNavigation` para obter o objeto de navegação.\r\n   - Após a conclusão das operações, navega para a tela principal (`Home`).\r\n\r\n4. **Componente de Logotipo:**\r\n   - Inclui o componente `LogoImage` para exibir o logotipo do aplicativo, centralizado na tela.\r\n\r\n5. **Armazenamento Local de Dados:**\r\n   - Utiliza o `AsyncStorage` para armazenar dados obtidos do banco de dados de forma local, permitindo o acesso rápido e offline.\r\n\r\n6. **Tratamento de Erros:**\r\n   - Registra e trata erros que possam ocorrer durante a obtenção de dados do banco de dados Firebase.\r\n\r\n7. **Estilo e Layout:**\r\n   - Utiliza estilos simples para centralizar o logotipo na tela durante a exibição da SplashScreen.\r\n\r\n## Componentes Utilizados\r\n\r\n- `React`, `useEffect` para gerenciar o ciclo de vida.\r\n- `View` do React-Native para estrutura de layout.\r\n- `useNavigation` do `@react-navigation/native` para navegação.\r\n- `useLoading` e `Storage` para interação com Firebase.\r\n- `AsyncStorage` para armazenamento local de dados.\r\n- Componente `LogoImage` para exibição do logotipo.\r\n\r\n## Observações\r\n\r\n- Este componente é crucial para proporcionar uma experiência inicial ao usuário, exibindo o logotipo e realizando operações iniciais necessárias antes de redirecionar para a tela principal.\r\n\r\n![SplashScreen](asset/splash.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\TypeOfPic.md",
    "name": "./manual/subscreens/TypeOfPic.md",
    "content": "# TypeOfPic\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela de Seleção de Tipo de Foto permite ao usuário escolher uma foto de sua galeria ou tirar uma nova foto para usar como foto de perfil. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Seleção de Foto:**\r\n   - Permite ao usuário selecionar uma foto existente de sua galeria.\r\n\r\n2. **Criação de Nova Foto:**\r\n   - Permite ao usuário tirar uma nova foto para usar como foto de perfil.\r\n\r\n3. **Exibição de Progresso:**\r\n   - Exibe uma barra de progresso enquanto a foto está sendo carregada.\r\n\r\n4. **Exibição de Mensagens:**\r\n   - Exibe mensagens de erro se ocorrerem problemas durante o processo.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. Alguns dos principais componentes incluem:\r\n\r\n1. **Modal:**\r\n   - Componente para exibir a foto selecionada ou tirada.\r\n\r\n2. **Image:**\r\n   - Componente para exibir a foto selecionada ou tirada.\r\n\r\n3. **TouchableOpacity:**\r\n   - Componente que possibilita a criação de botões clicáveis.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela de Seleção de Tipo de Foto, é necessário garantir que o aplicativo tenha permissão para acessar a câmera e a galeria do dispositivo.\r\n\r\n## Observações\r\n\r\n1. **Seleção de Foto:**\r\n   - A tela permite ao usuário selecionar uma foto existente de sua galeria.\r\n\r\n2. **Criação de Nova Foto:**\r\n   - A tela permite ao usuário tirar uma nova foto para usar como foto de perfil.\r\n\r\n3. **Exibição de Progresso:**\r\n   - A tela exibe uma barra de progresso enquanto a foto está sendo carregada.\r\n\r\n4. **Exibição de Mensagens:**\r\n   - A tela exibe mensagens de erro se ocorrerem problemas durante o processo.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\UploadPic.md",
    "name": "./manual/subscreens/UploadPic.md",
    "content": "# UploadPic\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela de Upload de Foto permite ao usuário fazer o upload de uma foto selecionada ou tirada para usar como foto de perfil. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Upload de Foto:**\r\n   - Permite ao usuário fazer o upload de uma foto selecionada ou tirada.\r\n\r\n2. **Exibição de Mensagens:**\r\n   - Exibe uma mensagem de sucesso quando a foto é carregada com sucesso.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. Alguns dos principais componentes incluem:\r\n\r\n1. **Toast:**\r\n   - Componente para exibir mensagens de sucesso ou erro.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela de Upload de Foto, é necessário garantir que o aplicativo tenha permissão para acessar a câmera e a galeria do dispositivo, e que o usuário tenha selecionado ou tirado uma foto para fazer o upload.\r\n\r\n## Observações\r\n\r\n1. **Upload de Foto:**\r\n   - A tela permite ao usuário fazer o upload de uma foto selecionada ou tirada.\r\n\r\n2. **Exibição de Mensagens:**\r\n   - A tela exibe uma mensagem de sucesso quando a foto é carregada com sucesso. Se ocorrer um erro durante o processo, uma mensagem de erro é exibida.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\subscreens\\WebViewScreen.md",
    "name": "./manual/subscreens/WebViewScreen.md",
    "content": "# WebViewScreen\r\n\r\n## Principais Funcionalidades\r\n\r\nA tela WebViewScreen permite ao usuário visualizar conteúdo da web dentro do aplicativo. As principais funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Visualização de Conteúdo da Web:**\r\n   - Permite ao usuário visualizar páginas da web dentro do aplicativo.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para criar uma interface intuitiva. O principal componente utilizado é:\r\n\r\n1. **WebView:**\r\n   - Componente para exibir conteúdo da web.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a tela WebViewScreen, é necessário garantir que o aplicativo tenha acesso à internet.\r\n\r\n## Observações\r\n\r\n1. **Visualização de Conteúdo da Web:**\r\n   - A tela permite ao usuário visualizar páginas da web dentro do aplicativo, proporcionando uma experiência de usuário mais integrada.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\Balance.md",
    "name": "./manual/components/homeComponents/Balance.md",
    "content": "# Balance\r\n\r\n## Funcionalidades Principais\r\n\r\nO componente `Balance` é responsável por exibir informações de saldo e gastos, permitindo ao usuário ocultar ou exibir esses valores clicando no componente.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Toggle Balance:**\r\n   - Permite alternar entre a exibição e ocultação dos valores de saldo e gastos ao ser clicado.\r\n\r\n2. **Tooltips Informativos:**\r\n   - Utiliza tooltips para fornecer informações contextuais sobre o propósito do componente e instruções de interação.\r\n\r\n## Componentes Utilizados\r\n\r\nO `Balance` utiliza os seguintes componentes principais:\r\n\r\n1. **TooltipComp:**\r\n   - Utiliza o componente `TooltipComp` para exibir dicas informativas sobre o componente.\r\n\r\n2. **Animated:**\r\n   - Utiliza a biblioteca `Animated` do React Native para aplicar animações suaves na exibição e ocultação dos valores.\r\n\r\n## Pré-requisitos\r\n\r\nCertifique-se de que o componente `TooltipComp` esteja devidamente configurado no seu projeto, e que as dependências, como `react-native-reanimated` e `react-native-gesture-handler`, estejam instaladas.\r\n\r\n## Observações\r\n\r\n1. **Interatividade Intuitiva:**\r\n   - A funcionalidade de alternar entre a exibição e ocultação dos valores é intuitiva para o usuário.\r\n\r\n2. **Tooltips Informativos:**\r\n   - Os tooltips fornecem informações úteis e orientações sobre as funcionalidades do componente.\r\n\r\n3. **Design Responsivo:**\r\n   - O design do componente é responsivo, ajustando-se a diferentes tamanhos de tela.\r\n\r\n4. **Personalização de Estilo:**\r\n   - O componente oferece flexibilidade para personalização adicional de estilo, como cores e tamanhos de fonte.\r\n\r\n5. **Animação Suave:**\r\n   - A animação de fade-in e fade-out proporciona uma transição suave, melhorando a experiência do usuário.\r\n\r\n6. **Multi-Tooltips:**\r\n   - O componente utiliza tooltips em duas instâncias para fornecer informações sequenciais e contextuais ao usuário.\r\n\r\n7. **Liberdade de Interação:**\r\n   - O usuário tem a liberdade de explorar as funcionalidades do componente de acordo com as instruções fornecidas pelos tooltips.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\Header.md",
    "name": "./manual/components/homeComponents/Header.md",
    "content": "# Header\r\n\r\n## Funcionalidades Principais\r\n\r\nO componente `Header` é responsável por exibir o cabeçalho da aplicação, incluindo informações do usuário e botão de perfil.\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Slide In Down Animation:**\r\n   - Utiliza a animação `Slide In Down` do pacote `react-native-animatable` para uma entrada suave quando o componente é montado.\r\n\r\n2. **Exibição do Nome do Usuário:**\r\n   - Apresenta o nome do usuário obtido do objeto `userData`.\r\n\r\n3. **Botão de Perfil:**\r\n   - Oferece um botão para acessar a tela de perfil do usuário ao ser pressionado.\r\n\r\n## Componentes Utilizados\r\n\r\nO `Header` utiliza os seguintes componentes principais:\r\n\r\n1. **Animatable.View:**\r\n   - Utiliza o componente `Animatable.View` para aplicar animações de entrada.\r\n\r\n2. **Feather:**\r\n   - Ícone do pacote `@expo/vector-icons` utilizado para representar o botão de perfil.\r\n\r\n## Pré-requisitos\r\n\r\nPara integrar o `Header` corretamente, certifique-se de que as dependências, como `react-native-animatable` e `@expo/vector-icons`, estejam instaladas e configuradas em seu projeto.\r\n\r\n## Observações\r\n\r\n1. **Estilo Coeso:**\r\n   - O componente segue um estilo coeso com o tema visual da aplicação, utilizando cores e tamanhos de fonte consistentes.\r\n\r\n2. **Animação de Entrada:**\r\n   - A animação de entrada proporciona uma transição suave, melhorando a experiência do usuário.\r\n\r\n3. **Botão de Perfil Intuitivo:**\r\n   - O botão de perfil é intuitivo, permitindo que o usuário acesse facilmente a tela de perfil ao pressioná-lo.\r\n\r\n4. **Design Responsivo:**\r\n   - O design é responsivo e ajustável a diferentes tamanhos de tela, garantindo uma aparência consistente em dispositivos variados.\r\n\r\n5. **Personalização de Estilo:**\r\n   - O componente fornece uma estrutura flexível para personalização adicional de estilo, se necessário.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\HomeModal.md",
    "name": "./manual/components/homeComponents/HomeModal.md",
    "content": "# HomeModal\r\n\r\n## Funcionalidades Principais\r\n\r\nO `HomeModal` é um componente utilizado para adicionar transações de receitas ou despesas de forma interativa. As funcionalidades principais incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Entrada de Dados:**\r\n   - Permite ao usuário inserir dados, como descrição, valor e data para a transação.\r\n\r\n2. **Seleção de Data:**\r\n   - Oferece um seletor de data para escolher a data da transação.\r\n\r\n3. **Visualização de Ação:**\r\n   - Exibe a ação que está sendo realizada (adicionar receita ou despesa) e a categoria correspondente.\r\n\r\n4. **Botões de Ação:**\r\n   - Botões de navegação permitem voltar à tela anterior ou salvar a transação.\r\n\r\n## Componentes Utilizados\r\n\r\nO `HomeModal` utiliza vários componentes do React Native para criar uma interface interativa e amigável. Alguns dos componentes-chave incluem:\r\n\r\n1. **Modal:**\r\n   - Utiliza o componente `Modal` do `react-native-modal` para exibir uma janela modal.\r\n\r\n2. **DateTimePicker:**\r\n   - Incorpora o `DateTimePicker` para selecionar a data da transação.\r\n\r\n3. **Ionicons:**\r\n   - Ícones fornecidos pelo conjunto Ionicons para representar visualmente os botões de ação.\r\n\r\n4. **TextInput:**\r\n   - Componente `TextInput` para a entrada de dados como descrição e valor.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar o `HomeModal`, é necessário garantir que os estilos e temas de cores estejam configurados de acordo com a aparência geral da aplicação. Certifique-se de que as dependências externas, como `@react-native-community/datetimepicker` e `react-native-modal`, estejam instaladas corretamente.\r\n\r\n## Observações\r\n\r\n1. **Estilo Consistente:**\r\n   - O componente segue o estilo visual da aplicação, garantindo uma experiência consistente para o usuário.\r\n\r\n2. **Entrada de Dados Validada:**\r\n   - O valor digitado para a quantia é validado para garantir que apenas números válidos sejam aceitos.\r\n\r\n3. **Seleção de Data Intuitiva:**\r\n   - A interface de seleção de data é intuitiva e oferece uma experiência fácil para o usuário.\r\n\r\n4. **Botões de Ação Claros:**\r\n   - Os botões de navegação são claramente representados por ícones reconhecíveis, facilitando a compreensão do usuário sobre as ações disponíveis.\r\n\r\n5. **Layout Responsivo:**\r\n   - O layout é responsivo para diferentes tamanhos de tela, proporcionando uma experiência consistente em dispositivos variados.\r\n  \r\n\r\n![Input screen](asset/entrada.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\HorizontalMenuOption.md",
    "name": "./manual/components/homeComponents/HorizontalMenuOption.md",
    "content": "# HorizontalMenuOption\r\n\r\n## Funcionalidades Principais\r\n\r\nA `HorizontalMenuOption` representa uma opção no menu horizontal da aplicação, proporcionando funcionalidades específicas relacionadas às diferentes categorias. As funcionalidades incluem:\r\n\r\n### Principais Funcionalidades:\r\n\r\n1. **Acesso a Páginas Específicas:**\r\n   - Redireciona o usuário para páginas específicas com base na categoria selecionada.\r\n   - Pode direcionar para as páginas de Configurações, Gráficos ou Finanças, conforme a categoria.\r\n\r\n2. **Exibição de Modal Interativo:**\r\n   - Exibe um modal interativo para adicionar transações de receitas ou despesas.\r\n   - Facilita a entrada de dados diretamente do menu.\r\n\r\n3. **Adição de Receitas ou Despesas:**\r\n   - Permite ao usuário adicionar novas receitas ou despesas diretamente do menu.\r\n\r\n4. **Atualização Automática:**\r\n   - Atualiza automaticamente os dados ao adicionar novas transações.\r\n\r\n## Componentes Utilizados\r\n\r\nA tela utiliza diversos componentes do React Native para proporcionar uma experiência amigável ao usuário. Alguns dos principais componentes incluem:\r\n\r\n1. **TouchableOpacity:**\r\n   - Componente que possibilita a criação de botões clicáveis.\r\n\r\n2. **AntDesign e Fontisto:**\r\n   - Ícones fornecidos pelos conjuntos AntDesign e Fontisto para representar visualmente as categorias.\r\n\r\n3. **HomeModal Component:**\r\n   - Um modal personalizado utilizado para a entrada de dados, como descrição, valor e data, ao adicionar novas transações.\r\n\r\n## Pré-requisitos\r\n\r\nPara utilizar a `HorizontalMenuOption`, é necessário garantir que a tela de configurações, gráficos e finanças esteja corretamente configurada. Além disso, o AsyncStorage deve ser configurado para armazenar informações localmente.\r\n\r\n## Observações\r\n\r\n1. **Simplicidade Visual:**\r\n   - O componente foi projetado para oferecer uma interface visual simples e intuitiva.\r\n\r\n2. **Interação Rápida:**\r\n   - Facilita a adição rápida de transações diretamente do menu, sem a necessidade de navegar para outras páginas.\r\n\r\n3. **Modal Interativo:**\r\n   - Utiliza um modal interativo para proporcionar uma experiência de entrada de dados mais amigável.\r\n\r\n4. **Atualização Automática:**\r\n   - As alterações realizadas na adição de transações são automaticamente atualizadas na visualização principal.\r\n\r\n\r\n![Menu](asset/menu.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\Menu.md",
    "name": "./manual/components/homeComponents/Menu.md",
    "content": "# Menu\r\n\r\n## Descrição\r\n\r\nO componente `Menu` exibe um menu horizontal com várias opções de ações que o usuário pode realizar, como adicionar entradas, realizar compras, registrar gastos, acessar configurações, visualizar gráficos e gerenciar moedas. Este componente é projetado para ser utilizado como parte de um aplicativo de controle financeiro.\r\n\r\n## Funcionalidades Principais\r\n\r\n### 1. Menu Horizontal\r\n- Apresenta um menu horizontal que pode ser navegado arrastando para o lado.\r\n\r\n### 2. Opções de Menu\r\n- Inclui várias opções de menu, cada uma representada por um ícone, rótulo e tipo de ação.\r\n\r\n### 3. Toque Responsivo\r\n- Cada opção de menu é interativa e responde a toques do usuário.\r\n\r\n### 4. Dicas de Ferramentas (Tooltips)\r\n- Integra dicas de ferramentas para fornecer informações contextuais e orientações ao usuário.\r\n\r\n### 5. Arraste para Visualizar Mais\r\n- Incentiva o usuário a arrastar o menu horizontalmente para visualizar todas as opções disponíveis.\r\n\r\n## Componentes Utilizados\r\n\r\n1. **TooltipComp:**\r\n   - Utiliza o componente `TooltipComp` para fornecer dicas de ferramentas informativas.\r\n\r\n2. **ScrollView:**\r\n   - Utiliza `ScrollView` do React Native para criar a interface de menu horizontal.\r\n\r\n3. **HorizontalMenuOption:**\r\n   - Utiliza o componente `HorizontalMenuOption` para renderizar cada opção no menu.\r\n\r\n## Estrutura de Dados\r\n\r\nO array `menuOptions` define as opções disponíveis no menu. Cada objeto no array representa uma opção com as seguintes propriedades:\r\n\r\n- **actionType:** Tipo de ação a ser realizada (adicionando, configurando, etc.).\r\n- **label:** Rótulo da opção.\r\n- **icon:** Nome do ícone associado à opção.\r\n- **type:** Tipo de ação (entrada, saída, configurações, gráficos, moeda, etc.).\r\n\r\n## Uso\r\n\r\nO componente `Menu` deve ser integrado em uma tela maior, geralmente como parte de uma estrutura de navegação ou em um contexto mais amplo de um aplicativo financeiro.\r\n\r\n```jsx\r\n<Menu\r\n  isRefresh={/* Estado indicando se é necessário atualizar */}\r\n  refresh={/* Função para acionar uma atualização */}\r\n  navigation={/* Objeto de navegação do React Navigation */}\r\n  moneyGraph={/* Dados relacionados a gráficos de dinheiro */}\r\n  showMenuTip={/* Estado indicando se a dica de ferramenta do menu deve ser exibida */}\r\n  setTip={/* Função para configurar o estado da dica de ferramenta do menu */}\r\n  showSettingsTip={/* Estado indicando se a dica de ferramenta de configurações deve ser exibida */}\r\n  setShowSettingsTip={/* Função para configurar o estado da dica de ferramenta de configurações */}\r\n/>\r\n```\r\n\r\n## Observações\r\n\r\n1. **Responsividade:**\r\n   - O design do menu é responsivo, adaptando-se a diferentes tamanhos de tela.\r\n\r\n2. **Intuitividade:**\r\n   - O usuário é incentivado a explorar as opções do menu através de dicas de ferramentas e interações responsivas.\r\n\r\n3. **Configurações de Menu:**\r\n   - O componente `HorizontalMenuOption` é utilizado para representar cada opção no menu, facilitando a extensão ou personalização futura.\r\n\r\n![menu](asset/menu.png)\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\MoreOptions.md",
    "name": "./manual/components/homeComponents/MoreOptions.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\MovementRegister.md",
    "name": "./manual/components/homeComponents/MovementRegister.md",
    "content": "# MovementRegister\r\n\r\n## Descrição\r\n\r\nO componente `MovementRegister` é responsável por exibir registros de movimentação, como entradas, saídas ou gastos, em um formato de lista. Cada registro exibe detalhes como data, descrição e valor, sendo possível ocultar ou exibir o valor ao tocar no registro.\r\n\r\n## Funcionalidades Principais\r\n\r\n### 1. Exibição de Registros\r\n- Apresenta os registros de movimentação em um formato de lista.\r\n\r\n### 2. Ocultar/Exibir Valor\r\n- Permite ao usuário ocultar ou exibir o valor associado a cada registro ao tocar no item.\r\n\r\n### 3. Animação de Transição\r\n- Utiliza uma animação de transição suave para mostrar ou esconder o valor do registro.\r\n\r\n## Propriedades\r\n\r\n- **props:** Objeto contendo as propriedades do registro, como data, descrição, valor e tipo.\r\n\r\n## Estrutura do Componente\r\n\r\nO componente `MovementRegister` consiste em um `TouchableOpacity` que envolve a exibição dos detalhes do registro. Ele possui a seguinte estrutura:\r\n\r\n1. **Data:** Exibe a data do registro.\r\n2. **Descrição:** Apresenta a descrição associada à movimentação.\r\n3. **Valor:** O valor da movimentação, podendo ser ocultado/exibido ao tocar no registro.\r\n\r\n## Uso\r\n\r\n```jsx\r\n<MovementRegister props={{ date: '01/01/2023', description: 'Compra de mantimentos', value: 50.0, type: 1 }} />\r\n```\r\n\r\n## Estilos\r\n\r\nO componente possui estilos definidos para cada elemento, como data, descrição e valor, bem como estilos para animações de transição e esqueleto.\r\n\r\n## Observações\r\n\r\n1. **Cores:**\r\n   - Utiliza cores diferentes para valores positivos (`#2ecc71`) e negativos (`#e74c3c`).\r\n\r\n2. **Estilos de Transição:**\r\n   - Aplica uma animação de transição suave para mostrar ou esconder o valor do registro.\r\n\r\n3. **Sinalização Visual:**\r\n   - Utiliza um esqueleto (skeleton) para indicar visualmente a presença do valor, mesmo quando está oculto.\r\n\r\n4. **Responsividade:**\r\n   - Projetado para se adaptar a diferentes tamanhos de tela e proporcionar uma experiência de usuário consistente.\r\n\r\n\r\n![mov regis](asset/entrada.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\homeComponents\\Movements.md",
    "name": "./manual/components/homeComponents/Movements.md",
    "content": "# Movements\r\n\r\nO componente React-Native denominado `Movements` é responsável por exibir informações sobre transações financeiras, como descrição, data e valor.  \r\nEste componente é projetado para ser utilizado em uma lista de movimentos financeiros, proporcionando uma representação visual clara e interativa.\r\n\r\n## Principais Características\r\n\r\n1. **Toque Interativo:**\r\n   - O componente é envolto por um `TouchableOpacity`, permitindo interação com o usuário ao ser pressionado.\r\n\r\n2. **Exibição Condicional de Valor:**\r\n   - O valor da transação é inicialmente oculto e é exibido quando o componente é pressionado (`showValue` é alternado).\r\n\r\n3. **Formatação de Data:**\r\n   - Utiliza a função `formatarData` para formatar a data da transação. Caso não haja data disponível, exibe \"sem data\".\r\n\r\n4. **Estilo Responsivo:**\r\n   - Utiliza estilos flexíveis para se adaptar a diferentes tamanhos de tela.\r\n\r\n5. **Estilos Personalizáveis:**\r\n   - Define estilos específicos para a data, rótulo, valor (receita) e despesas. Os estilos são configurados para melhor legibilidade e apelo visual.\r\n\r\n6. **Indicação Visual de Despesas:**\r\n   - O valor é exibido em vermelho (`#e74c3c`) quando se trata de uma despesa, proporcionando uma indicação visual clara do tipo de transação.\r\n\r\n## Parâmetros\r\n\r\n- `props`: Objeto contendo as propriedades da transação, incluindo `date` (data), `description` (descrição), `value` (valor) e `type` (tipo de transação - 1 para receita, 0 para despesa).\r\n\r\n## Observações\r\n\r\n- Este componente é flexível e pode ser incorporado em listas ou páginas de movimentações financeiras.\r\n- A formatação do valor considera o tipo de transação para exibição apropriada (receita ou despesa).\r\n\r\n![Movements component](asset/mov.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\ChangeData.md",
    "name": "./manual/components/ChangeData.md",
    "content": "# ChangeData\r\n\r\nEste componente React-Native, denominado `ChangeData`, oferece a funcionalidade de modificar dados específicos do usuário, como nome, email, profissão ou perfil de investimento.  \r\nInclui um modal interativo para a entrada de novos dados e interage com o Firebase para atualizar as informações.\r\n\r\n## Funcionalidades Principais\r\n\r\n1. **Modal de Alteração de Dados:**\r\n   - Utiliza o pacote `react-native-modal` para criar um modal de alteração de dados.\r\n   - Exibe um modal com entrada de texto para modificar o valor associado ao rótulo fornecido (`label`).\r\n   - O modal possui botões de confirmação e cancelamento para realizar ou descartar as alterações.\r\n\r\n2. **Interação com o Firebase:**\r\n   - Utiliza o contexto `useLoading` para obter a string de autenticação e criar uma instância de `Storage` para interagir com o Firebase.\r\n   - Na montagem do componente, carrega os dados do usuário do Firebase utilizando `getFullDoc` e armazena em `userData`.\r\n\r\n3. **Atualização de Dados:**\r\n   - Ao confirmar as alterações no modal, utiliza a função `updateData` para atualizar os dados no Firebase.\r\n   - A função decide qual campo de dados deve ser atualizado com base no rótulo fornecido (`label`).\r\n\r\n4. **Estilo e Layout Responsivos:**\r\n   - Utiliza estilos específicos para proporcionar uma experiência visual agradável e responsiva.\r\n   - Apresenta um estilo de borda que separa visualmente instâncias consecutivas do componente.\r\n\r\n## Componentes Utilizados\r\n\r\n- `TouchableOpacity` e `View` do React-Native para interação e estrutura de layout.\r\n- `Modal` do pacote `react-native-modal` para a criação de um modal.\r\n- `Ionicons` do `@expo/vector-icons` para ícones.\r\n- `Storage` para interação com o Firebase.\r\n- Componentes `Text` e `TextInput` para exibição e entrada de texto.\r\n\r\n## Observações\r\n\r\n- Este componente é destinado a ser utilizado em configurações ou telas de perfil, permitindo ao usuário editar informações pessoais de maneira simples.\r\n\r\n![ChangeData Screen](asset/changeData.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\MoneysGraph.md",
    "name": "./manual/components/MoneysGraph.md",
    "content": "# MoneysGraph\r\n\r\nO componente React-Native denominado `MoneysGraph` é responsável por exibir gráficos de barras relacionados a transações financeiras.  \r\nUtiliza a biblioteca `react-native-chart-kit` para criar gráficos de barras interativos e visualmente atrativos.  \r\nEste componente é ideal para representar dados financeiros de maneira clara e compreensível.\r\n\r\n## Principais Características\r\n\r\n1. **Gráfico de Barras:**\r\n   - Utiliza o componente `BarChart` da biblioteca `react-native-chart-kit`.\r\n   - Representa graficamente os dados financeiros em um gráfico de barras.\r\n   - A largura e altura do gráfico são configuráveis para se adaptarem a diferentes tamanhos de tela.\r\n\r\n2. **Configuração do Gráfico:**\r\n   - `chartConfig` define a configuração do gráfico, como as cores, opacidade e largura da linha.\r\n   - A cor das barras é definida dinamicamente com base na opacidade e em uma escala de verde.\r\n\r\n3. **Texto Descritivo:**\r\n   - Exibe um texto descritivo acima do gráfico, indicando o nome da categoria ou período representado no gráfico.\r\n   - O texto é centralizado e estilizado para melhor legibilidade.\r\n\r\n4. **Personalização de Estilos:**\r\n   - Utiliza estilos específicos para aprimorar a apresentação visual.\r\n   - Define margens, bordas e espaçamentos para melhor organização e apelo visual.\r\n\r\n## Parâmetros\r\n\r\n- `bardata`: Dados do gráfico de barras. Deve ser um array contendo objetos com propriedades `data` (valores das barras) e `color` (cor das barras).\r\n- `name`: Nome da categoria ou período representado no gráfico.\r\n\r\n## Observações\r\n\r\n- Este componente é projetado para ser reutilizado em diferentes partes do aplicativo onde gráficos de barras relacionados a finanças sejam necessários.\r\n- A biblioteca `react-native-chart-kit` oferece opções adicionais de personalização que podem ser exploradas conforme necessário para atender aos requisitos específicos de design.\r\n\r\n![MoneyGraph Screen](asset/moneyGraph.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\LogoImage.md",
    "name": "./manual/components/LogoImage.md",
    "content": "# LogoImage\r\n\r\nO componente React-Native chamado `LogoImage` é responsável por exibir uma animação com a logomarca da aplicação.  \r\nA animação inclui um efeito de fade-in (opacidade aumentando de 0 para 1) e uma rotação contínua de 360 graus.\r\n\r\n## Principais Características\r\n\r\n1. **Fade-in:**\r\n   - Utiliza a propriedade `opacity` da animação para criar um efeito de fade-in.\r\n   - O componente começa com uma opacidade de 0 e aumenta para 1 ao longo de 5000 milissegundos.\r\n\r\n2. **Rotação Contínua:**\r\n   - Utiliza a propriedade `rotate` da animação para criar uma rotação contínua.\r\n   - A rotação varia de 0 a 360 graus ao longo de 2000 milissegundos.\r\n\r\n3. **Promise Delays:**\r\n   - Usa `await new Promise(resolve => setTimeout(resolve, tempo))` para introduzir atrasos entre diferentes etapas da animação.\r\n\r\n4. **Estilo Dinâmico:**\r\n   - Aplica estilos dinâmicos para a imagem, incluindo a opacidade e a transformação de rotação.\r\n\r\n## Parâmetros\r\n- Não aceita parâmetros externos.\r\n\r\n**Configurações de Animação:**\r\n- Configurações específicas para cada animação, como duração e interpolação, são ajustadas para alcançar o efeito desejado.\r\n\r\n**Estilos Padrão:**\r\n- Usa estilos padrão para centralizar e alinhar a imagem no centro da tela.\r\n\r\n## Observações\r\n\r\n- O componente faz uso das bibliotecas `react` e `react-native` para criar a animação.\r\n- É um componente reutilizável que pode ser incluído em uma tela de carregamento ou em outras partes da interface do usuário para uma experiência visual mais dinâmica.\r\n\r\n## Exemplo de Uso\r\n\r\n```jsx\r\n<LogoImage />\r\n```\r\n\r\n**Imagem:**\r\n- A imagem da logomarca é referenciada pelo caminho `./../static/imgs/logo.png`. \r\n\r\n![Logo component](asset/logo.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\ArrowBack.md",
    "name": "./manual/components/ArrowBack.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\finalproj-devmovel\\manual\\components\\TooltipComp.md",
    "name": "./manual/components/TooltipComp.md",
    "content": "",
    "static": true,
    "access": "public"
  }
]